[{"categories":["flutter","flutter 2","web","desktop"],"contents":"Read this article of mine on Smashing Magazine\u0026rsquo;s Website, I have many more on Smashing and elsewhere, check them out in the \u0026ldquo;Articles I\u0026rsquo;ve Published Elsewhere\u0026rdquo; section of my blog.\n","permalink":"https://www.carmine.dev/posts/flutter2smashing/","tags":null,"title":"What’s New In Flutter 2? on Smashing Magazine"},{"categories":["flutter","book","programming flutter"],"contents":"It\u0026rsquo;s been a year since the Pragmatic Programmers published Programming Flutter, my Flutter book.\nThere have been many people saying great things about it, and many more asking me to guide them through the Flutter journey they started by reading my book.\nThis blog is designed to help with common things people want to do with Flutter, but if you have any question, in addition to emailing me at carmine@carminezacc.com, you can post about issues with the book or questions about Flutter on its DevTalk page, where you can also find a 35% discount on the price of the book.\nI will resume publishing tutorials on this blog over the next few weeks.\n","permalink":"https://www.carmine.dev/posts/oneyearbook/","tags":null,"title":"One year of Programming Flutter, DevTalk and a 35% discount on the book!"},{"categories":["flutter","web"],"contents":"Long time no see! It\u0026rsquo;s been a while since I\u0026rsquo;ve last posted something on my blog, and that\u0026rsquo;s been for several reasons, with the bottom line being that I\u0026rsquo;ve run out of ideas and haven\u0026rsquo;t really had the time to sit down and think about great blog post ideas.\nI\u0026rsquo;m coming back with a post that\u0026rsquo;s going to be a little shallower than usual, but that I find to be important nonetheless.\nIf you don\u0026rsquo;t follow me on Twitter, you might have missed the two articles I\u0026rsquo;ve written for Smashing Magazine on Flutter for Web and desktop.\nThose were introductions and tutorials which didn\u0026rsquo;t mention the current state of Flutter for the Web much, and this post is here to give an overview of just that.\nIt\u0026rsquo;s split in two parts, each answering a question:\n How hard is it to make it work? How well does it work?  How hard is it to make it work? This section is going to overlap with the first of my Smashing Magazine articles, but just a little bit.\nFirst of all, Flutter Web development is not available on the stable channel, and this means you need to switch to the beta channel. In addition to that, you need to run the\n$ flutter config --enable-web command to enable Web development, but you probably already knew all of that. Still, I can\u0026rsquo;t really take anything for granted when I\u0026rsquo;m writing to the whole of the Internet, and I\u0026rsquo;m already making it hard enough to understand what I\u0026rsquo;m talking about to people who don\u0026rsquo;t even know what the heck Flutter is, and if that\u0026rsquo;s you I know a book you should read. Ask me about that, or maybe just take a look at my Twitter or this blog.\nAnyway, after you\u0026rsquo;ve done that the Web browser will become a device Flutter will try to use to debug and you will be able to run flutter build web to get a bundle delivered to the build folder containing what the browser needs to show your beautiful Web app to your users, in particular your Dart code will be compiled to JS and the index.html file will be built based on the index.html in the web directory, which is the Web equivalent of the android and ios directories: you can modify it to change the app name and favicon, for example.\nOne thing you might not know is that Flutter for the Web has another build target: a WASM target using Skia running on WebGL.\nHow well does it work? That build target is as experimental as it gets, and it currently causes some very severe rendering issues on some clients that means it\u0026rsquo;s completely not fit for a production app that\u0026rsquo;s meant to be used on devices that you don\u0026rsquo;t have complete control over.\nOn the other hand, the Skia target is the one that will usually cause fewer issues overall with the app and will give a more predictable, mobile-like behaviour on the devices it works well on.\nJust use the JS target if you need to support any device.\nTalking about how well the app works, I also have to mention that the initial loading time can be quite slow, and you may find it unacceptable, so check it out with something simpler before you invest too much time into a project.\nAlso, TextFields sometimes don\u0026rsquo;t get in focus again right away when clicking on them after they go out of focus.\nThere are some general usability tradeoffs that need to be kept in mind, especially when running the Web app on desktop devices. You won\u0026rsquo;t get a scrollbar from the browser because Flutter handles scrolling itself, so you need to create a scrollbar yourself, perhaps aided by something like the draggable_scrollbar package on Pub.\nAnother one is that text isn\u0026rsquo;t even selectable by default. You can use SelectableText instead of Text to fix that, but the users still won\u0026rsquo;t be able to copy the text so it\u0026rsquo;s not going to cut it for a blog or other text-rich websites.\nAn easily fixable drawback is the lack of routing. Even named routes don\u0026rsquo;t really cut it if you show content from a database on different pages: everything is still passed under the hood and not through the URL. That\u0026rsquo;s very easily fixable using the fluro package.\nIn general, you\u0026rsquo;ll have to think about other differences between mobile apps and websites, for example clicking and dragging has the same effect as tapping and dragging on a mobile device, and Flutter doesn\u0026rsquo;t allow you to handle scrollwheel scrolling events differently than dragging events.\nAlso, if you use cookies, remember to use the BrowserClient and to set the withCredentials option to true, otherwise they won\u0026rsquo;t be stored for subsequent requests.\nConclusion Flutter can be used successfully to build Web apps, but it\u0026rsquo;s still got a few drawbacks. It\u0026rsquo;s up to you to decide whether or not it\u0026rsquo;s a good fit for your next project but, whatever you decide, remember that Flutter is still in very quick development and the situation may get better at any point.\n","permalink":"https://www.carmine.dev/posts/flutterweb/","tags":null,"title":"The Current State of Flutter for the Web"},{"categories":["flutter","flutter 2","web","desktop"],"contents":"Read this article of mine on Smashing Magazine\u0026rsquo;s Website, I have many more on Smashing\u0026rsquo;s site and elsewhere, check them out in the \u0026ldquo;Articles I\u0026rsquo;ve Published Elsewhere\u0026rdquo; section of my blog.\n","permalink":"https://www.carmine.dev/posts/crossplatformfluttersmashing/","tags":null,"title":"Solving Common Cross-Platform Issues When Working With Flutter on Smashing Magazine"},{"categories":["networking","flutter","Node.js","authentication","security","web","tutorial"],"contents":"I recently wrote a post about how to implement JWT Authorization in Flutter apps. I only considered the use case of writing a mobile app, so I recommended the use of the flutter_secure_storage package to store the tokens.\nAs it later emerged, some people wanted to use that tutorial as a guide for Flutter Web apps. flutter_secure_storage doesn\u0026rsquo;t work for Web apps.\nThis first post about this topic will simply look to address that, later I\u0026rsquo;ll post a more general overview of what needs to be taken in consideration when writing cross-platform apps in Flutter, including a deeper dive into storage on the different platforms. This will be more of a hands-on tutorial like the ones I previously posted, whereas the other one will be more of an opinion/overview post that I hope will help understand the thinking that is required before trying to deploy on multiple platforms.\nFor the sake of keeping each post focused, I\u0026rsquo;ll keep this one more practical and focused on how to make that example work on the Web.\nThe Basic, Compromising, Simple Approach The simple solution to that problem that will work on every platform is to use the shared_preferences package, which uses SharedPreferences on Android, NSUserDefaults on iOS and localStorage on the Web.\nThis is actually only one half of a solution, as using localStorage means that the value can be retrieved by any JS (or Dart code compiled to JS like Flutter Web code) on your page. This means you have to be extra careful with user input to avoid XSS attacks, and that comes into play especially if you have non-Flutter Web content on the same domain (which can access the same localStorage), which can access the same data.\nAlso, you need to keep in mind that the user can actually very easily access the token through JavaScript, so if their end gets compromised in any way that token can be easily read.\nThis should already give you an idea of the kind of issues you might have to deal with when writing cross-platform apps. Also, especially NSUserDefaults on iOS is not supposed to be used for sensitive information (nor is SharedPreferences actually), so you should use flutter_secure_storage on those platforms anyway, and at that point you can just use dart:html directly for the Web part and skip having shared_preferences as a dependency entirely.\nThe Better Approach flutter_secure_storage on mobile should be your first and only choice. It uses the proper Keychain API on iOS and it encrypts the data, stores the encrypted data in SharedPreferences and the cryptographic key is stored in the Android KeyStore, which is a safe approach.\nOn the Web though, you need to use a Web-based solution, so you need to think about our Flutter app as if it was any old boring HTML, CSS and JavaScript website.\nThe place where tokens are stored in Web apps are httpOnly cookies, which are sent to the backend automatically along with each request, but aren\u0026rsquo;t accessible by JavaScript.\nThe issue with that is that automatically part. It makes you vulnerable to CSRF, which is an attack that sends requests to your server from one of your users clients when they visit a page that isn\u0026rsquo;t yours. GET requests are particularly vulnerable because a GET request query is just a link that can be clicked by your users.\nThis can be prevented by having another token (which shouldn\u0026rsquo;t be the same token you use for authorization, obviously, but it can be generated based on that) that is stored in localStorage (so only your website\u0026rsquo;s code can access it) and send that along with each request in a dedicated header.\nYou still MUST NOT be vulnerable to XSS because, even though your token can\u0026rsquo;t be read, an attacker can still send requests through your own page, take your CSRF token, and bypass your CSRF protection entirely, but at least the JWT isn\u0026rsquo;t in their hands so they haven\u0026rsquo;t permanently stolen your user\u0026rsquo;s identity. Escape all user-provided data before ever doing anything with it both on the front-end if you have another website running and on the back-end when you put data in a database: many libraries to interact with databases have that feature built-in, you just need to use them properly instead of just concatenating strings. If you really have to use string concatenation because of your stack, remember to sanitize the input before doing anything with it.\nNow, let\u0026rsquo;s get hands-on and see the code needed to make everything work!\nPutting It In Practice If you\u0026rsquo;re new to my posts (and there will be a few of you), you might not be aware of my earlier post about JWT authentication with Flutter and Node (which supposed you were writing a mobile app), which I\u0026rsquo;ll use as a starting point, and that you therefore should at least be aware of in case something confuses you. I won\u0026rsquo;t be starting from scratch here.\nThe Node Side Before we can build the app, we need to get the backend API straight. Remember, I won\u0026rsquo;t explain the stuff I already covered in my previous post. The starting point is this repository. The code we\u0026rsquo;re going to end up with is in this repository.\nThe usual Node imports and the signup route don\u0026rsquo;t require any changes:\n  The login route, though, is where the fun part starts (you\u0026rsquo;re reading this because you find this all fun, don\u0026rsquo;t you?). The way I\u0026rsquo;m going to do this is the following: I\u0026rsquo;m going to generate two tokens: an access token and a an anti-CSRF token, and we\u0026rsquo;re going to send the first as a cookie and the second in the response body. I\u0026rsquo;m not setting the Secure flag because this code isn\u0026rsquo;t meant for production, but that should be set in production code given that your app would run with TLS in a production environment:\n The data route needs to get both values, one in the cookies and one as a header in order to work:\n and here is the entire index.js:\n The Flutter Side On the Flutter side, our starting point will be the code in this repository and we\u0026rsquo;re going to end up with the code in this repository.\nThe approach is going to be the following, in order to make it as obvious as possible we\u0026rsquo;re actually building a Web app: the JWT is going to be in the cookies, so it\u0026rsquo;s beyond our control, whereas we\u0026rsquo;re going to store the anti-CSRF token in the localStorage directly using dart:html.\nThis means that we are going to add to our imports import 'dart:html' show window; and take out the flutter_secure_storage dependency given that we are not using it:\n MyApp is, as always, where we decide whether we need to show the data page or the login page. In order to change as little as possible from the original, I switched the home from a FutureBuilder to a Builder (we don\u0026rsquo;t need Futures in the case of HTML localStorage) and moving from calling a jwtOrEmpty getter to generating our very own csrfTokenOrEmpty. The rest stays the same: if it\u0026rsquo;s expired, the access token has expired too, so we need the user to log in again, if we don\u0026rsquo;t have one we need to show the user the login page:\n The LoginPage gets changes in the callback to log in, as that needs to store the JWT to local storage too.\nwindow.localStorage can be accessed just like any Map like you see in the following snippet we\u0026rsquo;re going to use in the login page:\nvar username = _usernameController.text; var password = _passwordController.text; var jwt = await attemptLogIn(username, password); if(jwt != null) { window.localStorage[\u0026#34;csrf\u0026#34;] = jwt; Navigator.push( context, MaterialPageRoute( builder: (context) =\u0026gt; HomePage.fromBase64(jwt) ) ); I kept the variable names as they were for maximum comparability with the previous post.\nhere\u0026rsquo;s the entire LoginPage:\n The data (home) page is going to be the simplest one, as all that needs to change is the name of the header at which we send the anti-CSRF token, given that the access token is sent along with the request as a cookie automatically and the rest it taken care of by the backend:\n Here\u0026rsquo;s the full main.dart for that:\n In order to make that Flutter app look and behave nicer on bigger screens and browsers in general, you might want to check out the tutorial on responsive and Web development with Flutter I wrote for Smashing Magazine.\nOnwards: Your Next Steps You might have found this post useful, and perhaps you\u0026rsquo;d like to see more Flutter content from me. What you can do is:\n follow me on Twitter @carminezacc; subscribe to my newsletter check out the rest of this blog; check out my book, for which paperback copies are available in many places, including Amazon (when and if they deliver given the current pandemic).  ","permalink":"https://www.carmine.dev/posts/flutterwebjwt/","tags":null,"title":"Securely Storing JWTs in (Flutter) Web Apps"},{"categories":["flutter","flutter 2","web","desktop"],"contents":"Read this article of mine on Smashing Magazine\u0026rsquo;s Website, I have many more on Smashing\u0026rsquo;s site and elsewhere, check them out in the \u0026ldquo;Articles I\u0026rsquo;ve Published Elsewhere\u0026rdquo; section of my blog.\n","permalink":"https://www.carmine.dev/posts/responsivefluttersmashing/","tags":null,"title":"Responsive Web And Desktop Development With Flutter"},{"categories":["flutter","networking","tutorial","Node.js","WebSockets","notifications"],"contents":"We are going to discuss how to display notifications using the flutter_local_notifications plugin.\nAs always with these posts, you can be sure you\u0026rsquo;ve got all of the basic knowledge you need by reading my Flutter book, but not all of you like that way of learning, so I\u0026rsquo;ll list the topics which are considered prerequisites for this post.\nTo be able to easily follow this post, you need to know the following:\n basics of Flutter app development, including knowledge of basic Material Design widgets, but also UI composition and basic state management; asynchronous programming with Streams and listening to them (StreamSubscription);  The backend for our app will be the one we wrote for the previous post in the series. The app itself will be based on that, so I highly recommend you read the last part of that post if you want to understand how we\u0026rsquo;ve got topics a fully working example app at the end of this post. One way or another, here\u0026rsquo;s the GitHub repository with the example Flutter code and, for your convenience, here\u0026rsquo;s the repo for the Node.js backend code.\nThe flutter_local_notifications Package In Flutter apps, you can show notifications to the user while the app is running using the flutter_local_notifications package. It is fairly easy to use.\nInitializing the Plugin Before being able to use the plugin, you need to initialize it. This requires two different configuration steps: Android configuration and iOS configuration. Even though this is platform-specific, this is all done in Dart code. More specifically, plugin initialization works the following way:\nFlutterLocalNotificationsPlugin notifications = FlutterLocalNotificationsPlugin(); AndroidInitializationSettings androidInit = /* ... */; IOSInitializationSettings iOSInit = /* ... */; var initSettings = InitializationSettings(androidInit, iOSInit); notifications.initialize(initSettings); Now we are going to focus on AndroidInitializationSettings and IOSInitializationSettings.\nAndroid Initialization Settings Android configuration requires the creation of a drawable asset to use as the app icon displayed in the notification. To do that in Android Studio, get to the android/app/src/main/res/drawable directory in the left Project panel, right-click, and select New-\u0026gt;Vector Asset. This will guide you through the creation of a drawable vector asset.\nTake note of its name because, in order to initialize the flutter_notifications package, you need an AndroidInitializationSettings object, which is created in the following way:\nvar androidInit = AndroidInitializationSettings(\u0026#39;name_of_the_drawable\u0026#39;); iOS Initialization Settings The configuration for iOS is at the same time simpler and harder: there is no required argument, but there are a bunch of optional ones, which are fine to be left to default values and that you can find on the official API reference for the package. By default, it will ask the user to give permission to the app to show notifications when the plugin is initialized.\nThis means you can get a simple IOSInitializationSettings with default settings with\nvar iOSInit = IOSInitializationSettings(); Showing Notifications The notifications can be shown with plugin.show(id, title, body, NotificationDetails);.\ntitle and body are self-explanatory, id can just be set to 0.\nNotificationDetails is constructed with NotificationDetails(AndroidNotificationDetails android, IOSNotificationDetails iOS). The required (positonal) arguments for the AndroidNotificationDetails constructor are AndroidNotificationDetails(String channelId, String channelName, String channelDescription), whereas the IOSNotificationDetails constructor has no required parameters. Both take many optional named arguments, which I won\u0026rsquo;t cover here (also because I can\u0026rsquo;t be sure they will stay the same for long and we won\u0026rsquo;t use them in this tutorial), but that you should check out on the official API reference for the plugin (click here to see the options for iOS and here for those for Android).\nThe AndroidNotificationDetails constructor requires all of the arguments Android requires to show notifications. More specifically, Android Oreo (8.0, API level 26) and successive releases allows users to have different settings for different notification channels originating from the same app. The channelId can be any integer, you use the same number for notifications to be sent on the same channel and you use different numbers for different channels. channelName and channelDescription are names the user will use to differentiate your app\u0026rsquo;s channels, so they should be descriptive of the purpose of each notification channel if you plan to use multiple channels (e.g. a social networking app could have a channel for follow requests, one for direct messages received, one for likes to posts, etc.).\nHere\u0026rsquo;s what the app-level notification settings look like:\nand here\u0026rsquo;s what the channel-specific settings look like:\nHere\u0026rsquo;s an example, where notifications is the FlutterLocalNotificationsPlugin object:\nvoid showNotification(String title, String body) { notifications.show(0, title, body, NotificationDetails( AndroidNotificationDetails( \u0026#34;my_app_channel_id_0\u0026#34;, \u0026#34;User-Visible Notification Channel Title\u0026#34;, \u0026#34;Useful, user-visible description of the notification channel\u0026#34; ), IOSNotificationDetails() )); } Using It In The App This second part of the post is going to be about using the plugin in an app, more specifically changing the app we built in the previous post to also display notifications to the user. If you don\u0026rsquo;t want to read that but still want the code we are starting from, here\u0026rsquo;s the GitHub repo of the previous post\u0026rsquo;s app, whereas this is the one for the app we\u0026rsquo;ll build in this post.\nImporting First of all, add flutter_local_notifications to the dependencies in pubspec.yaml:\n and import it at the start of main.dart. You\u0026rsquo;ll notice we are also importing the status codes for the WebSocket library, which we\u0026rsquo;ll need when we close the connection to the server in the dispose() method of the State of the AnnouncementPage:\n Summary of The Changes The AnnouncementPage becomes a StatefulWidget, we don\u0026rsquo;t use a StreamBuilder, instead we wait for new data, change what\u0026rsquo;s displayed and also show a notifications. here\u0026rsquo;s the entire AnnouncementPage and AnnouncementPageState that we\u0026rsquo;ll analyze in more detail in the next section of the post:\n One of the changes you need to keep in mind is that we now have a text String variable that we will update as we get data from the server, and that text is what\u0026rsquo;s going to be displayed on the user\u0026rsquo;s screen.\nUsing the Plugin The flutter_local_notifications package has to be initialized. This can be done in multiple places. You could to do it in main and have a global variable to be able to access the notifications plugin from anhywhere within the app without having to use InheritedWidgets or the Provider. In our case, though, we don\u0026rsquo;t really need that, as there really is only one widget that\u0026rsquo;s going to cause notifications to be displayed, which is our app\u0026rsquo;s AnnouncementPage. What we need to do is define a StreamSubscription that listens for changes in the stream received from the WebSocket and, if there are any, both updates the AnnouncementPage to show the new announcement (by calling initState and setting the text variable) and displays a notification.\nAll of this is done in the initState method:\n The New build Method The build method now simply needs to display the text we already get using the StreamSubscription, without requiring the use of a StreamBuilder. If the connection hasn\u0026rsquo;t been established yet, which would mean text is still null, we display a CircularProgressIndicator as we did when we used a StreamBuilder and we had no data yet. Given that the nickname is now defined inside the AnnouncementPage StatefulWidget definition, we need to access it using the this.nickname syntax in the onPressed callback for the FloatingActionButton that sends announcements.\n The dispose Method The dispose() method needs to close the WebSocket, letting the server know it\u0026rsquo;s being closed and freeing resources on both ends of the connection, and cancels the StreamSubscription because it\u0026rsquo;s not necessary anymore to listen for new announcements.\n Wrapping It Up That\u0026rsquo;s it! The app now sends notifications when it gets new announcements (including when it\u0026rsquo;s the one generating them, but for this app this is intended)!\nThe entire main.dart is going to be the following:\n Receiving Notifications in The Background People have complained that I focused on Firebase too much in my book, so I\u0026rsquo;m trying to compensate here on my blog by focusing on more traditional backend implementations and ways to do things.\nOne caveat is that, for example, the only way to be able to send notifications to closed apps on both Android and iOS is to use Firebase Cloud Messaging, which can send notifications directly to Android devices (what used to be called Cloud to Device Messaging and then Google Cloud Messaging) and uses the Apple Push Notification Service to send notifications to iOS devices.\nOnwards You can now subscribe to my newsletter to get email updates about new posts and, as always you can follow me on Twitter if you are active on there and want to be updated, and remember to check out my Flutter book in case you haven\u0026rsquo;t yet.\n","permalink":"https://www.carmine.dev/posts/flutternotifications/","tags":null,"title":"Flutter Notifications Without Firebase"},{"categories":["flutter","networking","tutorial","Node.js","WebSockets"],"contents":"Hi everyone, in this post I\u0026rsquo;m going to show you how to use WebSockets in Flutter apps and write a Node backend to test the app.\nIn this post we’re not going to worry about authentication/authorization, as that was the focus of the previous post in the series. As always, this is meant for people with a decent understanding of the basics of Flutter. I\u0026rsquo;ve written a book about Flutter that will get you up to speed reasonably quickly and with ease but, in case you really need to do this now and either don\u0026rsquo;t like learning from the book or don\u0026rsquo;t want to read the whole thing, here\u0026rsquo;s the concepts I\u0026rsquo;m going to suppose you know how to use in order to follow this post:\n basic structure of a Flutter app (MaterialApp, Scaffold, Column, definition of custom widgets etc.); getting input from the user using a TextField and managing it with a TextEditingController; basic navigation using Navigator.push; asynchronous programming with Streams and the usage of the StreamBuilder.  WebSocket and Socket.io This post is about WebSockets. It won\u0026rsquo;t be about Socket.IO, which might be the focus of another post. WebSocket is a protocol (just like HTTP) and there are some packages and libraries to use it directly, but a very popular alternative to doing that is using Socket.io, which is a library that may or may not use WebSocket as its communication protocol, given that it has its own real-time communication engine that is used in case there is no way to establish a WebSocket-based connection.\nThe way Socket.io does it is rather the other way around, using its own engine to initiate the connection, upgrading to WebSocket if it\u0026rsquo;s supported. The main difference you would notice in the example in a tutorial is that Socket.io supports server broadcasting by default, meaning you don\u0026rsquo;t have to manually iterate over the connected clients to send the message to each, as that is a feature of Socket.io itself.\nWhat We\u0026rsquo;re Going to Build A very common application for WebSockets is building a chat app. That\u0026rsquo;s a very good example but, in my view, it\u0026rsquo;s not a great example for a blog post, unless what one wants to teach is how to build a chat app and not how to use WebSockets. I used the example of a chat app in my book to show how to use Firebase, but that was to show as many aspects of Flutter and Firebase as possible in one example, and it is a cool example.\nWhat I\u0026rsquo;m going to do in this post, though, is show you everything you need to know in order to build a real time app, leaving the rest to you and avoid showing how to interact with a specific database, how to build a very specific complex user interface: the example is simply going to be an app showing the latest message sent by an user as an announcement to every connected user.\nWebSockets in Flutter The web_socket_channel Dart WebSocket package is Google-developed and very easy to use. That\u0026rsquo;s what we\u0026rsquo;re going to use in this post.\nOpening a Connection A connection can be opened by creating an object of class WebSocketChannel, and you can connect to a WebSocket server by using the WebSocketChannel.connect contructor: channel = WebSocketChannel.connect(URI); where URI is an Uri, that you could get from a String containing an URL (something like ws://myserver.mydomain.com:3000) by using Uri.parse(URL).\nSending and Receiving Data The WebSocketChannel.stream is used to listen for messages. As the name implies, it\u0026rsquo;s a Stream, which is exactly the best data type for incoming data from a WebSocket. It returns any new messages coming from the WebSocket as soon as they are received.\nThe WebSocketChannel.sink is used to send messages. As the name implies, it\u0026rsquo;s a StreamSink. If you\u0026rsquo;ve read my book or have worked with the Firebase Cloud Firestore before, this is used in a similar way to the Firestore\u0026rsquo;s CollectionReference object: WebSocketChannel.sink.add(data) sends data through the WebSocket.\nClosing the Connection channel.sink.close(statusCode);\n @override void dispose() { super.dispose(); channel.sink.close(statusCodes.goingAway); } Building an Example App You can find the complete source code for this app in this GitHub repository.\nLet\u0026rsquo;s start with the pubspec.yaml, which needs to install the web_socket_channel package:\n In lib/main.dart we\u0026rsquo;re going to import package:web_socket_channel/web_socket_channel.dart to use the WebSocketChannel, then we set the server IP and port, and then start an app that has as its home page a class called FauxLoginPage:\n The FauxLoginPage The FauxLoginPage is going to be, as the name implies, a fake login page: it\u0026rsquo;s not going to be a proper login page for the user to authenticate, but just a page for the user to set an username. As I wrote above, we\u0026rsquo;re not going to worry about authentication because that was the focus of the previous post. If you know how to use TextFields (and especially if you\u0026rsquo;re familiar with the Firebase chat app example in my book, which has a login page that works a bit like this one but actually authenticates the user) this is all going to be self-explanatory and simple:\n The AnnouncementPage is going to simply be a StatelessWidget: we\u0026rsquo;re going to let a StreamBuilder take care of the changes in values returned by the Stream of data from the WebSocket. Below the text coming from the WebSocket, we\u0026rsquo;re going to have a TextField that allows the user to send a message. We convert the data to a string so that it could technically be anything, and be shown to the user as is, to make debugging easier:\n The entire main.dart is going to be the following, then:\n Building the Backend for the App We\u0026rsquo;re going to build the backend for the app with Node.js and the ws npm package.\nThe ws Package There\u0026rsquo;s a very popular and easy-to-use WebSocket client/server package for Node called simply ws, so you can install it using\n$ npm install ws You can start a WebSocket server that listens to a given port with the following code:\nvar server = new WebSocket.Server( { port: port, } ); you can wait for a connection and define a callback to be ran when a client connects with the following code:\nserver.on(\u0026#39;connection\u0026#39;, function connection(client) { // code to execute when a client connects }); This gives us a client object we can use to send messages to the connected WebSocket client using client.send():\nclient.send(msg); We can also listen for messages sent by the client over the WebSocket and run a function when that happens:\nclient.on(\u0026#39;message\u0026#39;, function incoming(message) { // code to execute when a message is received }); An useful member of the server object is server.clients, which is an array of the connected clients. This means we can send a message to each connected client with the following:\nfor(var cl of server.clients) { cl.send(message); } Implementing the Backend You can find source code for the backend at this GitHub repository.\nThe first thing we need is to import the ws package:\n Then set a port and start the WebSocket server:\n let\u0026rsquo;s also define a default message to send to the client the first time:\n When a client connects for the first time, we send them that message so the client has something to display to the user when they connect:\n Now, let\u0026rsquo;s handle the reception of a message:\n What we should do is broadcast the received message to all connected clients:\n If we also log to console each received message the final index.js is the following:\n As always, if you enjoyed this post, consider following me on Twitter @carminezacc.\n","permalink":"https://www.carmine.dev/posts/flutterwebsockets/","tags":null,"title":"Two-Way, Real-Time Communication with WebSockets in Flutter Apps (+ Node backend Implementation)"},{"categories":["networking","flutter","Node.js","authentication","security","tutorial"],"contents":"Photo by James Sutton on Unsplash\nThe series of posts about advanced networking topics applied to Flutter apps continues. As always, this is meant for people who already have a good understanding of Flutter and know how to use Flutter widgets and the basics of the http library.\nThat\u0026rsquo;s the kind of stuff you can learn by reading my Flutter book.\nIn particular, this post supposes you know how to make HTTP requests, how to use the most basic widgets (Scaffold, Column, Text, FlatButton, etc.) and that you know how to use a TextField with a TextEditingController, the basics of asynchronous functions and Futures and how to use them with a FutureBuilder, how to display dialogs and how to work with JSON.\nYou can learn about them online too, if you hate books. I won\u0026rsquo;t be judging you.\nRegarding the backend, I\u0026rsquo;m going to suppose you know about how to use the Express Node.js framework, and that you know how to use basic SQL commands like CREATE, INSERT, and SELECT.\nWhat We’re Going to Build The app we’re going to build is the simplest example of an app that requires authentication: it allows anyone to sign up, and any logged in user can access a piece of data. We’re going to implement the back-end with Node and the front-end with Flutter.\nWhat is JWT JWT (JSON Web Token) is a standard that specifies a very secure way to transmit session tokens between an user-accessible front-end (that we’ll write using Flutter) and a back-end (that we’ll write using Node).\nUnlike a more traditional user session implementations, in which the session token is stored both on the server and on the client, the client sends the token along with every request and the server can check whether a session exists with that token for that user and decide whether to grant access based on that and what the user is actually allowed to do.\nJWT is different. The server doesn’t store the token: at the time of authentication, it sends a signed token, but it doesn’t store it, instead relying on the signature it attaches to the token (obtained either with RSA, ECDSA or HMAC with SHA256 usually), which allows it to verify both the authenticity of the token and whether it was tampered with.\nThis means the token\u0026rsquo;s payload can contain both data the front-end needs, since it can be freely accessed by it, and data (like the user name/ID and/or an expiration date) the server needs to validate the request and the token.\nThe actual structure of the JWT is made of three base64-encoded strings separated by a . character: the first contains information needed to verify the signature, the second contains the payload, the third contains the signature.\nAnalyzing an Example I\u0026rsquo;ve taken an example of a JWT generated by the backend we\u0026rsquo;ll build as an example in this post. It is eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXJuYW1lIiwiaWF0IjoxNTgxOTY2MzkxLCJleHAiOjE1ODMyNjIzOTF9.IDXKR0PknG96OyVgRf7NEX1olzhhLAiwE_-v-uMbOK0.\nIf you pay attention, you\u0026rsquo;ll notice there are two dots. The first (eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9) can be decoded to ASCII to {\u0026quot;alg\u0026quot;:\u0026quot;HS256\u0026quot;,\u0026quot;typ\u0026quot;:\u0026quot;JWT\u0026quot;}, which is a JSON object, which can be formatted like this:\n{ \u0026#34;alg\u0026#34;: \u0026#34;HS256\u0026#34;, \u0026#34;typ\u0026#34;: \u0026#34;JWT\u0026#34; } HS256 is short for HMAC+SHA256, and typ is quite self-explanatory, it tells us what the string we\u0026rsquo;re looking at is.\nThe second string (eyJ1c2VybmFtZSI6InVzZXJuYW1lIiwiaWF0IjoxNTgxOTY2MzkxLCJleHAiOjE1ODMyNjIzOTF9) can be decoded and formatted to:\n{ \u0026#34;username\u0026#34;: \u0026#34;username\u0026#34;, \u0026#34;iat\u0026#34;: 1581966391, \u0026#34;exp\u0026#34;: 1583262391 } This is a JWT for an user called username, issued at (iat) second 1581966391 after the Unix epoch (the 17th of February 2020 at 19:06) and that expires at (exp) second 1583262391 (03/03/2020 at the same time as when it was created).\nThe third string is just the signature obtained as an HMAC with SHA256.\nOur API Interface Our backend is going to have three routes:\n /signup, which accepts POST requests in urlencoded format, containing two self-explanatory text fields: an username field and a password field and either responds with status code 201 if it was able to create the user, or status code 409 if it wasn\u0026rsquo;t; /login, which accepts POST requests in urlencoded format and accepts the same fields as /signup, and either responds with status code 200 and the JWT in the body of the response, or with status code 401 if there is no user with the given username and password; /data, which accepts GET requests, which must have a JWT attached to the Authorization request header, and which will either return the \u0026ldquo;secret data\u0026rdquo; only authenticated users can access (with status code 200) or a response with status code 401, meaning the JWT is invalid or has expired.  Implementing the Front-End App with Flutter You can find the code for this Flutter app on GitHub by clicking here.\nUsing The flutter_secure_storage Package The flutter_secure_storage package is very easy to use: it\u0026rsquo;s simply key-value pair storage, but using iOS\u0026rsquo;s Keychain directly or by encrypting the data, storing the encrypted data in Android\u0026rsquo;s Shared Preferences.\nYou can write the myvalue and associate it to the mykey key using it by using storage.write() in the following way:\nvar storage = FlutterSecureStorage(); storage.write(key: \u0026#34;mykey\u0026#34;, value: \u0026#34;myvalue\u0026#34;); storage.write is asynchronous (it has a return type of Future\u0026lt;void\u0026gt;), so you should use await if you need to pause execution while it executes.\nYou can read the value associated to the mykey key by using storage.read(), which is also asynchronous, so you need to wait for it to return in order to be able to read the value.\nvar storage = FlutterSecureStorage(); var value = await storage.read(key: \u0026#34;mykey\u0026#34;); You can use storage.delete() to delete a value (it\u0026rsquo;s also asynchronous):\nvar storage = FlutterSecureStorage(); storage.delete(key: \u0026#34;mykey\u0026#34;); Two methods exist, called readAll() and deleteAll() (both asynchronous), which respectively return a Map of all the stored values and delete all of the stored values.\nImplementation The Flutter app doesn’t need to be particularly complicated to be able to work with JWT: it’s mostly about writing an authentication flow, storing the JWT token and sending it with each request.\nIn addition to that, for this example we’ll check whether the token has expired on the front-end and we’ll show the username after the user logs in, so we’ll actually have to decode the payload. We are going to store the JWT using the flutter_secure_storage package, which is the simplest way to access the secure storage interfaces provided by iOS and Android from a Flutter app.\nHere are two screenshots of what we want to achieve:\nAdd the flutter_secure_storage and http packages to the app\u0026rsquo;s dependencies in pubspec.yaml:\n Then, set the minimum supported Android version to SDK level 18 (Android 4.3) because that\u0026rsquo;s required by flutter_secure_storage.\n Create the usual lib/main.dart, import the packages, initialize a FlutterSecureStorage object and insert the IP and port where the Node server backend will be running, so that we can use that going forward without having to change anything else from the example code I provided:\n The Structure of Our Flutter App The structure of our Flutter app is going to be the following:\n the MyApp class, which is going to check whether the user has previously logged in, and decide whether to run the LoginPage or the HomePage; the LoginPage is where we are going to allow the user to log in or sign up; the HomePage is where we are going to show the user the secret data that can only be accessed by logged-in users. The HomePage needs to be able to be constructed from either just the JWT Base 64 string  Creating a Log-In Page The MaterialApp object we\u0026rsquo;re launching is called MyApp, but we\u0026rsquo;ll worry about that later, given that it needs to check whether we\u0026rsquo;re already logged in, and then choose whether to display a log-in page or the home page.\nThat\u0026rsquo;s a bit boring to worry about now, let\u0026rsquo;s build some UI and create a log-in page!\nThe log-in page itself will be a StatelessWidget called LoginPage:\nclass LoginPage extends StatelessWidget { } The nature of the login page and our implementation means we are going to make extensive use of dialogs. This means we\u0026rsquo;ll create a helper method in order to make everything more succint:\nvoid displayDialog(BuildContext context, String title, String text) =\u0026gt; \tshowDialog( \tcontext: context, \tbuilder: (context) =\u0026gt; \tAlertDialog( \ttitle: Text(title), \tcontent: Text(text) \t), \t); We\u0026rsquo;ll also create methods that attempt to login and signup the user, and they\u0026rsquo;re very simple POST requests, as we saw earlier on when we talked about our app\u0026rsquo;s API interface.\nWe\u0026rsquo;ll return a string for the login method, which will be null in case of an error (i.e. wrong username/password) and the JWT if the authentication process succeded:\nFuture\u0026lt;String\u0026gt; attemptLogIn(String username, String password) async {  var res = await http.post(  \u0026#34;$SERVER_IP/login\u0026#34;,  body: {  \u0026#34;username\u0026#34;: username,  \u0026#34;password\u0026#34;: password  }  );  if(res.statusCode == 200) return res.body;  return null; } The sign-up method doesn\u0026rsquo;t actually have to return anything useful to the app, so we can just return the status code and deal with that later to establish whether the operation was successuful or not:\nFuture\u0026lt;int\u0026gt; attemptSignUp(String username, String password) async {  var res = await http.post(  \u0026#39;$SERVER_IP/signup\u0026#39;,  body: {  \u0026#34;username\u0026#34;: username,  \u0026#34;password\u0026#34;: password  }  );  return res.statusCode; } Here comes the fun part!\n@override Widget build(BuildContext context) =\u0026gt;  Scaffold(  appBar: AppBar(title: Text(\u0026#34;Log In\u0026#34;)),  body: /* TODO:INSERT BODY HERE */  ); what\u0026rsquo;s the body going to be? A Column with two TextFields that allow the user to insert username and password and two FlatButtons: one to log in and one to sign up. We\u0026rsquo;ll also add some padding around it given that it looks horrible to my eyes without it:\nbody: Padding(  padding: EdgeInsets.all(8.0),  child: Column(  children: [  TextField(  controller: _usernameController,  decoration: InputDecoration(  labelText: \u0026#39;Username\u0026#39;  ),  ),  TextField(  controller: _passwordController,  obscureText: true,  decoration: InputDecoration(  labelText: \u0026#39;Password\u0026#39;  ),  FlatButton(  child: Text(\u0026#34;Log In\u0026#34;),  onPressed: /* TODO:HANDLE LOG IN */  ),  FlatButton(  child: Text(\u0026#34;Sign Up\u0026#34;),  onPressed: /* TODO:HANDLE SIGN UP */  )  )  ]  ) ) The labelText in the InputDecoration is the nicest looking way to tell users what each TextField is for.\nDefine the _usernameController and _passwordController TextEditingControllers somewhere in the class definition, like this:\nfinal TextEditingController _usernameController = TextEditingController(); final TextEditingController _passwordController = TextEditingController(); Let\u0026rsquo;s worry about the function to handle logging in, which needs to call the attemptLogIn method with the username and password taken from the TextEditingControllers, then check the JWT returned by the attemptLogIn method. If it is null, we need to display a dialog to inform the user we were unable to log them in. If it isn\u0026rsquo;t, we can switch to the HomePage and save the JWT:\nonPressed: () async {  var username = _usernameController.text;  var password = _passwordController.text;   var jwt = await attemptLogIn(username, password);  if(jwt != null) {  storage.write(key: \u0026#34;jwt\u0026#34;, value: jwt);  Navigator.push(  context,  MaterialPageRoute(  builder: (context) =\u0026gt; HomePage.fromBase64(jwt)  )  );  } else {  displayDialog(context, \u0026#34;An Error Occurred\u0026#34;, \u0026#34;No account was found matching that username and password\u0026#34;);  } }, The function that handles sign-up is going to be complicated by the checking of a few conditions.\nWe are going to check on the front-end that the user doesn\u0026rsquo;t try to use un username or password less than 4 characters long. This should also be done on the back-end, but this tutorial focuses more on Flutter than it does on Node, so we\u0026rsquo;re just going to do this on the front-end.\nIf those two inputs are valid, we are going to attempt to sign up, and check the response. If we get HTTP status code 201, it means the user was created and we can simply tell the user to log in with those credentials.\nIf we get HTTP status code 409, it means the username is already in use, and we can tell that to the user. If the response\u0026rsquo;s status code is neither 409 nor 201, the request failed (probably because of a network error or an internal server error), we just tell the user an unknown error occurred:\nonPressed: () async {  var username = _usernameController.text;  var password = _passwordController.text;   if(username.length \u0026lt; 4)  displayDialog(context, \u0026#34;Invalid Username\u0026#34;, \u0026#34;The username should be at least 4 characters long\u0026#34;);  else if(password.length \u0026lt; 4)  displayDialog(context, \u0026#34;Invalid Password\u0026#34;, \u0026#34;The password should be at least 4 characters long\u0026#34;);  else{  var res = await attemptSignUp(username, password);  if(res == 201)  displayDialog(context, \u0026#34;Success\u0026#34;, \u0026#34;The user was created. Log in now.\u0026#34;);  else if(res == 409)  displayDialog(context, \u0026#34;That username is already registered\u0026#34;, \u0026#34;Please try to sign up using another username or log in if you already have an account.\u0026#34;);  else {  displayDialog(context, \u0026#34;Error\u0026#34;, \u0026#34;An unknown error occurred.\u0026#34;);  }  } }, The entire LoginPage definition looks like this in the end:\n Creating an Home Page We already know what we need as constructors for the HomePage. Getting the payload from the base64 JWT string should be pretty self-explanatory if you understood the section at the start of this post about the structure of a JWT, and you only need to keep in mind that base64.decode needs a padded base64 string, and that can be obtained with base64.normalize():\nclass HomePage extends StatelessWidget {  HomePage(this.jwt, this.payload);   factory HomePage.fromBase64(String jwt) =\u0026gt;  HomePage(  jwt,  json.decode(  ascii.decode(  base64.decode(base64.normalize(jwt.split(\u0026#34;.\u0026#34;)[1]))  )  )  );   final String jwt;  final Map\u0026lt;String, dynamic\u0026gt; payload; } The HomePage\u0026rsquo;s build() method The HomePage widget itself is going to be made of a FutureBuilder that waits for the GET request to the server to get the data, and then either displays it or some text informing the user an error has occurred, if that is the case:\n@override Widget build(BuildContext context) =\u0026gt;  Scaffold(  appBar: AppBar(title: Text(\u0026#34;Secret Data Screen\u0026#34;)),  body: Center(  child: FutureBuilder(  future: http.read(\u0026#39;$SERVER_IP/data\u0026#39;, headers: {\u0026#34;Authorization\u0026#34;: jwt}),  builder: (context, snapshot) =\u0026gt;  snapshot.hasData ?  Column(  children: \u0026lt;Widget\u0026gt;[  Text(\u0026#34;${payload[\u0026#39;username\u0026#39;]}, here\u0026#39;s the data:\u0026#34;),  Text(snapshot.data, style: Theme.of(context).textTheme.display1)  ],  )  :  snapshot.hasError ? Text(\u0026#34;An error occurred\u0026#34;) : CircularProgressIndicator()  ),  ),  ); The HomePage class definition is, therefore, the following:\n Creating the MyApp Class The MyApp class is the class that gets run when the app starts. It needs to check whether it already has a JWT and, if it has one, it should check whether it is valid, whether it has expired and, based on that, decide whether to ask the user to log in or whether to show them the home page. We are going to need to create a method called jwtOrEmpty()\nFuture\u0026lt;String\u0026gt; get jwtOrEmpty async {  var jwt = await storage.read(key: \u0026#34;jwt\u0026#34;);  if(jwt == null) return \u0026#34;\u0026#34;;  return jwt; } That\u0026rsquo;s because the FutureBuilder\u0026rsquo;s snapshot.hasData parameter that gets passed to the builder function would return false if it were to receive a null value, which would be the case if the JWT were non-existent. This is unwanted because we would have no way of distinguishing the case in which we are still waiting for the Future to return and the case in which there is no JWT. Having this second case return an empty string instead of null fixes the issue.\nAll that\u0026rsquo;s left to do is to create a build() method, which should return a MaterialApp (that\u0026rsquo;s the whole point of the MyApp class) that, after getting the JWT and checking it, either shows the user the login page or the home page based on the criteria I described earlier.\nAll of that ends up in the following class definition:\n Implementing the Back-End with Node You can find the code for this Node backend on GitHub by clicking here.\nThe Node back-end is where most of it happens: we need to create rules for login, logout and some sort of data to access. We are going to store users in an SQLite database to keep things simple for this example.\nChoosing How to Sign the Token The token can be signed using either a method based on public key cryptography (for example using RSA or ECDSA) or by relying on hashing the concatenation of the secret key and the message (called a payload in JWT terms) with any hashing algorithm (usually sha256). The latter concept has been expanded into a full standard for generation of a digital signature (called HMAC) that is protected against collisions and length extension attacks, about which you can find more information on Wikipedia.\nFor this example, that’s what we will use: HMAC with SHA256. That’s because it’s easier for a quick example for a blog post because we have greater freedom with our choice of private key. When building a real app, you should obviously consider the advantages and disadvantages of this approach based on your needs and the requirements your apps needs to meet. For this post we’ll use a short and simple string as a key, that’s not how it’s supposed to be done: it should ideally be a generated pseudorandom (and particularly long) key, just like any RSA or ECDSA key generated with OpenSSL, otherwise you’re making it very easy for attackers to crack your private key and generate their own JWT tokens your back-end will think are genuine, allowing them to pretend they’re logged in as any user, completely breaking your website’s security.\nSafety First! In other words, this is an example meant to be as easy to follow as possible and you must take the appropriate precautions when it comes to choosing or generating a private key. Since we’re talking about security precautions, you should obviously use TLS for communications between front-end and back-end in production. Also, salt the passwords before hashing them if you really want to play it safe.\nBuilding the Back-End These are the libraries we are going to use:\n Express, which is what we are going to use as a Web framework; jsonwebtoken, which simplifies greatly the process of creating JSON Web Tokens; the sqlite3 SQLite Node driver to create and access the SQLite database where we are going to store our users\u0026rsquo; data; Node\u0026rsquo;s built-in crypto library to hash the password to store in the SQLite database.  Using the jsonwebtoken Library The jsonwebtoken NPM package is very, very easy to use. It provides us with three functions, once imported with jwt = require(\u0026quot;jsonwebtoken\u0026quot;):\n jwt.sign(payload, key, options), which returns a JWT containing the payload and signed using the key, optionally you could also add a callback at the end of the argument list and it would be ran asynchronously, but we\u0026rsquo;re not going to use that feature for our simple example, the default algorithm used for generating the signature is RS256 (RSA signature with SHA256); jwt.verify(token, key), which returns the decoded payload if the JWT is valid, and throws an error if it isn\u0026rsquo;t, it also optionally takes some options and a callback just like jwt.sign(), but we\u0026rsquo;re going to provide neither of them; jwt.decode(token), which decodes the payload without verifying the validity, we\u0026rsquo;re not going to use this one at all.  For example, if your payload is {username: \u0026quot;myusername\u0026quot;} and the private key is stored in the variable privKey and you want to create a JWT using the provided RSA private key that is valid for two hours, you can run\nlet jwt = jwt.sign({username: \u0026#34;myusername\u0026#34;}, privKey, {expiresIn: \u0026#34;2h\u0026#34;} ); and then, if pubKey is the corresponding RSA public key, you can run\nlet jwt = jwt.verify({username: \u0026#34;myusername\u0026#34;}, pubKey); In our example we are going to use just one secret key (stored in a variable called KEY), so we are going to generate the JWT as an HMAC with SHA256 (HS256) and have it expire after 15 days, which means we are going to generate the JWT with:\nlet jwt = jwt.sign({username: \u0026#34;myusername\u0026#34;}, KEY, {expiresIn: \u0026#34;15d\u0026#34;, algorithm: \u0026#34;HS256\u0026#34;}); I recommend you look at the documentation for the package on the NPM page for a more complete list of options. I\u0026rsquo;m not writing an API reference here, I\u0026rsquo;m trying to make you understand how to implement this.\nA Quick Introduction to the sqlite3 Node SQLite Driver The sqlite3 Node SQLite Driver doesn\u0026rsquo;t come with too many bells and whistles. There are other packages that provide different interfaces, this is the most basic one and it\u0026rsquo;s perfect for a very basic and simple example that really shouldn\u0026rsquo;t require a huge node_modules directory or particularly complicated.\nAfter importing the library with sqlite = require(\u0026quot;sqlite3\u0026quot;), you can initialize a connection to a database stored in a file called filename.db with:\nlet db = new sqlite.Database(\u0026#34;filename.db\u0026#34;); The functions we are going to use are:\n db.get(query, function(err, row) {}), which runs the query and passes to the provided callback the first row returned as the row argument and any errors as the err argument; db.run(query), which runs the given query, without returning any results, this is used for commands such as CREATE and INSERT and you can pass a callback to be called in case of errors.  Two other functions exist called db.all() and db.each() which respectively pass all of the rows as an array to the callback and call the callback for each row returned, only passing one at a time. We would need to use such functions if we wanted, for example, to check whether a log-in attempt failed because the password was wrong, even though the given username exists in the database.\nQuery Parameters The queries can contain parameters, which can optionally be passed as an array, so they can replace ? characters found in the query string. This will sanitize the strings before substituting them, not making you vulnerable to SQL injection. For example, the following two calls to db.each are equivalent:\ndb.each(\u0026#34;SELECT * FROM Users WHERE username=\u0026#39;carmine\u0026#39;\u0026#34;, function(err, row) {  console.log(row); }); db.each(\u0026#34;SELECT * FROM Users WHERE username=?\u0026#34;, [\u0026#39;carmine\u0026#39;], function(err, row) {  console.log(row); }); Installing Dependencies As always, create a Node project with\n$ npm init and install the packages I listed above with\n$ npm install --save express jsonwebtoken sqlite3 Initial Config We are going to import all of the libraries into our code and set the secret key (a very unsafe one, but this is just an example) and initialize the database connection:\n Initializing the Database You can do this either directly using the SQLite or any other tool of your choice or by creating this Node.js file and running it:\n Implementing Sign-Up Signing users up is simple and has nothing to do with how we manage authorization: we\u0026rsquo;re not logging them in, which means we just need to check whether they have already signed up. If they haven\u0026rsquo;t, we sign them up by adding them to our database. We are going to use the Express built-in urlencoded middleware to parse the body of the request and we\u0026rsquo;re going to log everything to the server console:\n Logging in is all about looking in the database for the user who is trying to log in, generating a JWT and returning it if we find it, and returning an error if we don\u0026rsquo;t:\n Verifying the token is very easy with the Node library we are using, meaning the /data route is written very quickly and painlessly, remembering that a failure in verifying the JWT will result in an error being thrown:\n As usual, we take the port to run the server on from the environment variable PORT and, if that fails, we set it to 3000 and run the server:\n ","permalink":"https://www.carmine.dev/posts/jwtauth/","tags":null,"title":"Advanced Flutter Networking Part 2: User Authentication + JWT Authorization With Flutter and Node"},{"categories":["networking","flutter","Node.js","tutorial"],"contents":"My Flutter book is pretty light on advanced HTTP networking topics, focusing instead on giving a more well-rounded approach that, when it comes to networking, explains how to use the http networking package for basic requests, shows an example of an app that makes GET requests, and then goes a bit more specific with Firebase.\nMy blog is here for those who need more than that, and the first topic I\u0026rsquo;m going to cover is how to upload a file using a multi-part/form-data POST request.\nYou can find all of the code contained in this example in this GitHub repository.\nWhat is a Multi-Part POST Request Usually, the body of a POST request is made of textual key-value pairs. With a multipart POST request, you can also include files with binary content (images, various documents, etc.), in addition to the regular text values.\nMaking Multi-Part POST Requests with Flutter\u0026rsquo;s HTTP Library This little section is going to focus on one thing: creating a function that, given a file path and an URL, is able to send that file to that URL with that multipart POST request.\nThe next section is going to focus on how to build an app that lets the user insert the URL to which to send the request, pick an image and send it to the server, getting back the status of the request.\nThis means we\u0026rsquo;re not going to worry about dependencies in this section. All you need to know for this section is that we\u0026rsquo;ve got this at the top of our main.dart:\nimport \u0026#39;package:http/http.dart\u0026#39; as http; This allows us to create (not send) a multipart POST request using\nvar req = http.MultipartRequest(\u0026#39;POST\u0026#39;, Uri.parse(url)); This req object has a member Map called fields for textual values and a List called files to which you can add MultipartFiles.\nThe MultipartFile The most important element of this whole thing is the MultipartFile. It can be constructed in a few ways:\n the default MultipartFile(key, stream, length) constructor, which you can use if you need to create the file from a Stream of bytes of which we know the length; the MultipartFile.fromBytes(key, bytes) factory method, which attaches a file obtained from a List of bytes; the MultipartFile.fromString(key, string) factory method, which attaches a text file containing the string passed to it; the MultipartFile.fromPath(key, path) factory method, which attaches the file found at the given path.  In case you’re wondering, bytes simply means integers. That’s all a byte is. An 8-bit integer value. A list of integers, coupled with an encoding (that can usually be inferred with the help of the extension that’s part of the file name) is all you need to get images, documents, videos, music or text.\nIf you\u0026rsquo;re using one of the first two constructors for the MultipartFile, remember to set a filename using the specific named filename argument, as not doing that will cause issues with our back-end.\nHere are a few examples: if you have a file and a path to it, here’s how you create a multipart POST request and attach that file to the request:\n Using the default constructor you could write a function like the following:    UsingMultipartFile.fromBytes() you could write a function like the following:    UsingMultipartFile.fromPath() you could write a function like the following:   Adding Regular Text Fields You could add regular text fields to a Multipart POST requests simply by adding, after settomg initialized the MultipartRequest object, an item in the fields member Map:\nvar request = http.MultipartRequest(\u0026#39;POST\u0026#39;, Uri.parse(url)); request.fields[\u0026#39;key\u0026#39;] = \u0026#39;value\u0026#39;; Building an App Around That Now, to see it in action, let\u0026rsquo;s write an app that allows the user to insert an URL, pick an image, and then upload the image to the server at that URL. We\u0026rsquo;ll write the very simple back-end code required to accept files this way in Node after we\u0026rsquo;re done with the app. Feel free to skip ahead if you\u0026rsquo;re more interested in that.\nLet\u0026rsquo;s start, as we must, with an evaluation of the dependencies and the pubspec.yaml file. We\u0026rsquo;ll use two packages from Dart Pub: the image_picker Flutter package that will handle the image selection dialog for us, about which I wrote a tutorial on Medium a year ago (not part of the metered paywall in case you\u0026rsquo;re wondering) and the Dart http package that provides the networking features we need.\nAdd both the dependencies in pubspec.yaml (check the GitHub repo I linked at the start of the post if you don\u0026rsquo;t know how to do that) and import them both into the lib/main.dart file along with the usual Flutter Material Design API:\nimport \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:http/http.dart\u0026#39; as http; import \u0026#39;package:image_picker/image_picker.dart\u0026#39;; The Start Page Now let\u0026rsquo;s think about the actions the user needs to take in our app: in order to upload images, we first need an URL, so let\u0026rsquo;s show a screen that allows the user to set the URL first, and then we allow them to upload images. We\u0026rsquo;ll call this first screen StartPage. This is the usual Flutter code used to initialize an app, this tutorial really is meant for those who don\u0026rsquo;t need much explanation as to what it does and why (that\u0026rsquo;s more the realm of introductory tutorials and books like the one I\u0026rsquo;ve written):\n We use a TextEditingController to let the user both submit the value from the Android keyboard or press our cusdtom FlatButton below the TextField.\nThe Upload Page Here\u0026rsquo;s the code for the upload page, I\u0026rsquo;ll explain it down below after the code:\n uploadImage() is the simplest of the functions we saw earlier to upload images: we use MultipartFile.fromPath() directly and return the status string of the request. That\u0026rsquo;s going to be the state variable, which is what is shown in the middle of the screen to the user. The URL is the one we get from the StartPage.\nThe FloatingActionButton is fairly simple: ImagePicker.pickImage() shows the familiar image picking screen to the user returns (through a Future) the path to the file the user picks.\nWe use that (as part of the floating action button\u0026rsquo;s onPressed callback) together with the URL passed by the StartPage to call the uploadImage function and re-render the view using setState to show the state of the request to the user.\nWriting a Simple Back-End in Node to Handle Multi-Part POST Requests For this section, the tools we\u0026rsquo;re going to use are Node, Express and Multer. There\u0026rsquo;s not going to be much code involved, this is a fairly simple affair.\nFirst of all, install Node and NPM according to the instructions for your operating system on Node’s official website.\nAfter that, create a directory, run the command\n$ npm init and fill out to your preference the choices given to you (the default values are fine in case of doubt)\nand then\n$ npm --save install express multer Create a file called index.js with the following content:\n As you can see it\u0026rsquo;s not much code, but I\u0026rsquo;m going to explain it nonetheless.\nThe first 4 lines are simply dealing with dependencies: the first three are straight-up imports of dependencies, whereas line 4 sets up the Multer middleware (the one that handles file uploads) to save uploaded files to the uploads directory.\nLine 6 instantiates an Express server object, as the Express API documentation requires.\nCreating an Express Rule for Handling Multipart POST requests After that, on lines 8 to 19, we define a rule for incoming POST requests to the /upload path (in other words, it responds to POST requests sent to \u0026lt;server IP\u0026gt;:\u0026lt;port\u0026gt;/upload), it takes one file on the picture key, and it fires the callback function we defined as (req, res) {...} in the lines 8 to 19.\nThe callback prints to the console the name of the file that was received (on line 9), it then renames the file to the original file name.\nIt does that on lines 10 to 16 by creating, as is done using Node\u0026rsquo;s fs interface, streams (much like FILE* variables in C) that allow our script to read from an input file (req.file.path is the path Multer saved the received file to) and write to an output file (using the passed req.file.originalname, which is the filename specified in the POST request by the sender, which is our Flutter app). When this is finished (lines 13 to 16) we delete (unlinkSync) the temporary file created by Multer (which has a name that ensures there aren\u0026rsquo;t two files with the same name but doesn\u0026rsquo;t even keep the same extension as the original file) and send back a response saying everything was OK.\nIf an error happens (often because no file name was specified, on line 17) we will inform the sender of that.\nOn lines 22 and 23 we start the server on the port specified by the PORT environment variable or on port 3000 if no port was specified using environment variables.\nThat\u0026rsquo;s it.\nMaking Our Example Work To use the example code, start the server by running node index.js. Then, fire up the Flutter app on a phone/emulator, get your PC\u0026rsquo;s local IP (if the phone is connected to the same local network or it\u0026rsquo;s running on an emulator) to substitute to \u0026lt;server_ip\u0026gt; in http://\u0026lt;server_ip\u0026gt;:3000/upload, which is what you need to type into the TextField in the app. For example, if your PC\u0026rsquo;s IP is 192.168.1.2, you\u0026rsquo;d type in http://192.168.1.2:3000/upload. After that, press the + icon, pick an image, and you\u0026rsquo;ll see the Node script will print out a message like Received image_picker\u0026lt;gibberish\u0026gt;.jpg. By opening the uploads subdirectory in the directory where you have the back-end Node script, you\u0026rsquo;ll find a file called image_picker\u0026lt;gibberish\u0026gt;.jpg.\nI hope you found this tutorial useful and I invite you to tell me what topic I should cover next.\n","permalink":"https://www.carmine.dev/posts/multipartpost/","tags":null,"title":"Advanced Flutter Networking Part 1: Uploading a File to a REST API from Flutter Using a Multi-Part (form-data) POST Request"},{"categories":["opinion","flutter","linux","screen","tmux"],"contents":"When you love new stuff but don\u0026rsquo;t really want to lose old stuff you write this kind of stuff. It\u0026rsquo;s about tech stuff that\u0026rsquo;s old and tech stuff that\u0026rsquo;s new.\nIf you asked me a month ago, the term early adopter would have been a term I could identify myself with, especially when it comes to technology and computing.\nFor example, as is evident if you read any amount of the stuff I write, I\u0026rsquo;m a big proponent of Flutter as an app development framework and have been for quite some time.\nThat\u0026rsquo;s all well and good but, especially when it comes to Linux, I sometimes really like holding onto old and proven stuff. Not really on the desktop, I jumped on the Wayland bandwagon early enough and it has only caused me very minor issues in the early days and now I only go back to X.org the few (not always so few actually) times I\u0026rsquo;m lazy enough to build some GUI software I need to run as admin for it to work (I know about PolicyKit/polkit, but it\u0026rsquo;s just easier to not bother with it at all when I don\u0026rsquo;t have to).\nThe fact that sometimes that can interfere with being a credible early adopter came to light when I wrote an article for the Fedora Magazine about the screen command line utility.\nIt was on a topic among the ones they were looking for someone to write and, since I always use screen, I thought many other people may find it useful to have an article explain the most important features screen offers and how to use them.\nA few minutes after it was online, it started getting comments on how screen was outdated and tmux was much better, suggesting people to forget about screen completely.\ntmux is newer and it\u0026rsquo;s more likely to be updated in the future and it\u0026rsquo;s seeing more active development, but screen is still a solid option and it offers a lot of features.\nAs one of the commenters pointed out, tmux lacks (and may never have), among other things, support for terminals over serial connections, so if your backup in case you can\u0026rsquo;t connect to a machine in any other way is serial knowing screen may be more useful to you than learning tmux.\nBut that\u0026rsquo;s not even my point. Why should I have to forget screen in order to learn tmux? And by that I don\u0026rsquo;t just mean that I can use both as the difference in feature sets makes one easier to use or better than the other depending on the circumstance. I could argue that most of the people who use screen don\u0026rsquo;t even have to learn tmux: except for the comment section on that post, I\u0026rsquo;ve never heard people calling screen unstable and tmux is not much easier to use than it for most of what sysadmins do with screen. It\u0026rsquo;s always worked and it might keep working indefinitely.\nThis begs a question though, bringing us back to the start of this post. What about the early adopter thing? Why am I bothered by people commenting on my Flutter posts on dev.to telling people they\u0026rsquo;re fine using React Native?\nIt\u0026rsquo;s because they\u0026rsquo;re telling people who want to learn Flutter not to do it because they are too lazy to even learn the basics of Flutter themselves. They\u0026rsquo;re saying Flutter is going to fail. I\u0026rsquo;m not saying any of that about tmux. I\u0026rsquo;m not doing any of that. Before this post, I haven\u0026rsquo;t even written about tmux anywhere: I actually use it. Not as much as screen, though.\nI\u0026rsquo;m not hating on any technology (publicly, at least, I privately express stronger opinions on some software development frameworks/tools) because I don\u0026rsquo;t believe it\u0026rsquo;s of any benefit to society for me to tell you to ignore X and Y: I want to tell you all how amazing Flutter is and that\u0026rsquo;s all.\nI\u0026rsquo;ve got to be clear on this, though: with this post I don\u0026rsquo;t actually mean to say those comments on my posts telling me how much of a fool I am for being a fan of some old or new technology shouldn\u0026rsquo;t exist. I love answering them and would much prefer a civil back-and-forth to a single inflammatory comment with no follow-up.\nThat said, if anyone\u0026rsquo;s reading around the time I\u0026rsquo;m writing this, I wish all of you will be able to work with whatever technology you prefer, perhaps learn something new and exciting, and reach your goals in the coming year 2020.\n","permalink":"https://www.carmine.dev/posts/earlyadopter/","tags":null,"title":"The Early Adopter Conundrum and Reacting to Comments"},{"categories":null,"contents":"","permalink":"https://www.carmine.dev/cookiedeclaration/","tags":null,"title":"Cookie Declaration"},{"categories":["flutter","opinion"],"contents":"Google is known for moonshot projects. Often they\u0026rsquo;re just that, without much hope of being brought to fruition in the near future. But Flutter is not one of those: it\u0026rsquo;s here now and it works, wonderfully.\nHow Flutter Was Born: Bridging Mobile Platforms Flutter was released back in 2017 as a mobile development framework aiming to seamlessly bridge Android and iOS development without taking away any control over the hardware and low-level operating system features from the hands of the software developer, like many other frameworks do. It got lots of attention because Google showed impressive performance results, which are achieved thanks to the use of a low-level rendering engine that doesn\u0026rsquo;t rely on the operating system\u0026rsquo;s native interface elements like similar technologies such as Facebook\u0026rsquo;s React Native do.\nIt also got so much attention because it is being pointed to as the primary way of developing apps for Google\u0026rsquo;s upcoming Fuchsia OS, which is set to replace Google\u0026rsquo;s current operating systems. Developers also loved the top-notch developer tools allowing, among other things, to instantly preview the result of changes to the code without having to compile the app.\nIn addition to being one of the main topics of many conferences dedicated to Dart, the Google-developed programming language used to develop Flutter apps, Flutter has been discussed, presented and advertised for a significant amount of time at Google I/O ever since Flutter\u0026rsquo;s initial release in 2017, and we saw that especially in 2018, when Flutter was really being pushed by Google in anticipation of its 1.0 release in late 2018.\nLeaping into the Future: Bridging Desktop, Mobile, Web and Embedded Google I/O 2019 went one step further: experimental support for desktop and web platforms was released, setting forward a vision for a world in which a piece of software doesn\u0026rsquo;t have to be exclusive to one platform: it doesn\u0026rsquo;t matter what platform you need to support if Flutter is powering your app: it doesn’t matter whether they’re phones, tablets, computers, TVs or embedded devices.\nNotable Examples of Flutter Use Flutter is not just a big tech preview: it is being used in production today by big companies. Google themselves recently released the official app for Google Stadia, their well-known upcoming game streaming platform. Google also lists companies such as eBay, BMW, AliBaba, Tencent and other companies worth several billion dollars as Flutter users and one of the early adopters of Flutter in early 2018 was the Hamilton musical\u0026rsquo;s app.\nAway from mobile platforms, \u0026ldquo;The New York Times\u0026rdquo; has built some of its web-based digital puzzles in Flutter, that you can see at this link.\nWhy Flutter Is So Important Flutter is reality and it ought to be exciting for everyone: it could be about to bring down the last of the barriers stopping us from forgetting about the underlying interface entirely and think of applications in a way that is only dependent on the choices of the programmer and the requests of the users.\nWhat You Can Do With It You might be wondering what exactly you can expect to be built with it. The answer can be found in more than one way: the first is by taking an inductive approach, looking at what has been built with Flutter.\nThe most obvious example is something like the Hamilton app I mentioned above as the first major app using Flutter because it’s what most people think of when talking about a typical Flutter app. It’s an app that takes up-to-date information from the Internet and shows the information to the user with an unique aesthetic style in multiple layers, mixing everything from news-like sections to trivia quizzes.\nThis is a mix of some of the most common features in mobile apps, but we can highlight Flutter’s flexibility further: it has control over the screen, so games with custom graphics and animations (like the New York Times puzzle linked above) can be built with it, with the same framework that implements easy-to-use classes for all of the components of Material Design and the iOS design language.\nThe Low-Level Interfaces: C++, Swift/Objective-C and Java/Kotlin So Flutter can do anything visually. But we haven\u0026rsquo;t talked about what it can do with the hardware and low-level OS interfaces. To find that out, we are going to take the deductive approach.\nThe short answer is: anything a native app can do, and the reason for that is that Android Flutter apps can run Java/Kotlin or native C++ code just like regular Android SDK apps, Flutter iOS or macOS apps can run native Swift or Objective-C code and Linux apps can run native C++.\nTo any programmer, this simply means that the app has full access to the device\u0026rsquo;s capabilities. An example of that is a project of mine that aims to build a Flutter app that can manage filesystems on Linux by interfacing with Stratis, a Red Hat-developed storage management utility.\nFlutter is even starting to be considered by Linux GUI developers as a potential solution to the inconsistency among different desktop environments, and the people in charge of putting together Linux distributions are taking note and starting to consider putting some effort into making Flutter desktop support even better.\nLooking Onward Flutter\u0026rsquo;s unparalleled flexibility means there will be no duplication of effort in software development teams, increasing their productivity and eliminating any feature gap between versions of the same app developed for different platforms.\nThis is revolutionary and is already taking over market share in the mobile world, all that’s left to see is whether it can adapt and succeed on the other platforms, but with Google behind it and after seeing how many companies are investing heavily into it, it looks like it will change the way software is developed, making it easier for everyone to find high-quality software for any platform, be it a phone, a tablet, a computer or even a completely different kind of device, such as a car’s infotainment system, a smart home device or a smart TV.\n \u0026lt;a href=\u0026quot;https://pragprog.com/book/czflutr/programming-flutter\u0026quot; class=\u0026quot;btn btn-primary\u0026quot;\u0026gt;Check it Out Here\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  ","permalink":"https://www.carmine.dev/posts/flutterdesktopweb/","tags":null,"title":"Google's Flutter Framework Could Change Software Forever"},{"categories":["scripting","python","tutorial"],"contents":"This post is the third out of four in a series of posts about automating everyday tasks using scripting languages. The first one was an introduction to the hypothetical problem of having to take images divided into subfolders and dump all of them in one folder while altering their name and adding text over them to know what folder they came from (hypotheticall revealing the location where the pictures were taken) to solve and a first simple solution using Bash and ImageMagick.\nIn the second post we switched to Python and solved the https://carmine.dev/posts/wandpython/ same problem in a better way. With the Python version we can specify input and output directories and the code is much easier to understand.\nIn this post we\u0026rsquo;re going to take that Python code and make it work within a proper CLI tool built with the aid of argparse.\nWhat our Tool Will Be We\u0026rsquo;re going to implement the tool in three files:\n imageprocessor.py, which contains the code we wrote in the previous post and that provides an easy-to-use interface to Wand and ImageMagick in the form of a class called ImageProcessor, I\u0026rsquo;m not going to explain it line-by-line in this post, so you should read my previous post (linked at the start of this post) if you want to know how it came together; actions.py, which processes the arguments provided by argparse and uses the ImageProcessor to process the pictures. myclitool.py, which is the executable that configures argparse to make it do what we want it to do.  The Commands We Need to Implement Our tool is going to respond to two subcommands:\n generate dir save_dir which takes the pictures from dir, processes them in the way I talked about in the first two posts in the series, and saves the output to save_dir copy dir save_dir, which does the same but without adding text over the images, it only renames them and dumps them in the save_dir.  Building the Tool Let\u0026rsquo;s implement the tool starting from the code that actually performs the actions and then we\u0026rsquo;ll work our way through the abstraction layers and eventually get to the part that actually implements the CLI interface using argparse.\nmyclitool.py An Introduction to argparse As we learned in the previous post, it is possible to build a perfectly functional CLI tool in Python without having to use any third-party package.\nActually, that might not be completely true. It depends on your definition of perfectly functional. Without argparse, you need to have your own help and usage responses and you need to parse arguments one by one as they are provided to the tool. Doing anything that\u0026rsquo;s a bit more complex requires writing lots of code: having many subcommands, each with their own subcommands and usage strings, and perhaps different option would make the app very long and unreadable very quickly.\nThat\u0026rsquo;s where argparse helps: you define what you want your tool to respond to, write the functions that interact with the arguments in a logical and simple way, and it\u0026rsquo;s done in a tenth (or less) of the lines of code it would have taken in plain Python!\nHow to Use argparse The first element in the chain of objects used to configure argparse to do what we want is the ArgumentParser, which is the top level object all other objects should report to.\nIt is initialized with something like:\nparser = argparse.ArgumentParser( description=\u0026#34;Improve the way you look at your picture collection with this simple CLI tool\u0026#34; ) Further down the chain we\u0026rsquo;re going to have subparsers, the pre-requisite for which is an object you can generate like this:\nsubparsers = parser.add_subparsers() and that you can then use to add subparsers that will be linked to the original parser, optionally with an help text that will be used if the user requests usage information:\ngenerate = subparser.add_parser( \u0026#34;generate\u0026#34;, help=\u0026#34;Generate the pictures\u0026#34; ) Arguments are very easy to add, we\u0026rsquo;ll see how we get them and how to use them later, and the help text is there for the same purpose as all other help text, as a way to give more information to the user when they request usage information:\ngenerate.add_argument(\u0026#34;dir\u0026#34;, type=str, help=\u0026#34;The directory where the tree of input picture starts\u0026#34;) generate.add_argument(\u0026#34;save_dir\u0026#34;, type=str, help=\u0026#34;The directory where to save the output pictures\u0026#34;) Now we need to define a function to process the directories, which we\u0026rsquo;ll talk about when we come to the action.py file. Meanwhile, let\u0026rsquo;s say we\u0026rsquo;ll call it process_dir and let\u0026rsquo;s set it as the function to be called when the user calls the generate command:\ngenerate.set_defaults(func=actions.process_dir) Let\u0026rsquo;s do the same things we did for generate with copy:\ncopy = subparser.add_parser(\u0026#34;copy\u0026#34;, help=\u0026#34;Copy the pictures to the output path without adding text\u0026#34;) copy.add_argument(\u0026#34;dir\u0026#34;, type=str, help=\u0026#34;The directory where the tree of input picture starts\u0026#34;) copy.add_argument(\u0026#34;save_dir\u0026#34;, type=str, help=\u0026#34;The directory where to save the output pictures\u0026#34;) copy.set_defaults(func=actions.copy) The last two lines we need to add to myclitool.py are those that actually parse the arguments the user actually provided and call the corresponding function with the corresponding arguments:\nargs = parser.parse_args() args.func(args) actions.py argparse passes its arguments to the functions as a single structure that contains the arguments passed by the user.\nFor example, if we are passing an argument called arg1 and another called arg2, an hypothetical handle_call function that prints the arguments as passed by argparse is\ndef handle_call(args): print(args.arg1) # prints arg1 print(args.arg2) # prints arg2 Handling the generate Command The function to handle the generate CLI subcommand is going to be called process_dir to further underline the fact it\u0026rsquo;s the one meant to process the pictures and not just copy them.\nGiven that we are getting arguments called dir and save_dir\ndef process_dir(args): image_processor = ImageProcessor(args.dir, args.save_dir) image_processor.process_dir() Handling the copy Command The difference between these two functions is very subtle because of the way we implemented the ImageProcessor\u0026rsquo;s constructor, which takes an optional boolean value that tells the process method whether or not it\u0026rsquo;s supposed to process the images.\ndef copy(args): image_processor = ImageProcessor(args.dir, args.save_dir, process=False) image_processor.process_dir() In the end, the actions.py file is\nimageprocessor.py We also need the ImageProcessor code which, as I said, is explained in the previous post and you can find here with some useful comments so that you can work out how it\u0026rsquo;s put together without having to read that:\nUsing the Tool If python3 is the name of the command you use to run Python scripts (depends on your environment, it may be just python) you can use\npython3 myclitool.py generate /path/to/input /path/to/output to run the generate command and have /path/to/input as the input path and /path/to/output as the output path.\nThe copy subcommand can be used in the same way.\nYou can see usage information by running\npython3 myclitool.py -h and you can have help text specific to the generate command with\npython3 myclitool.py generate -h The same applies to copy obviously.\nMaking the Script Executable As with any script ran by a scripting language, it can be made executable on Linux/macOS/Unix with\nchmod +x myclitool.py and, after adding the shebang line\n#!/usr/bin/env python3 to the top of the file, you can execute it with\n./myclitool.py {command} [arguments] On Windows you need to use the Python Launcher for Windows.\nWrapping Up and Where to Go From Here We\u0026rsquo;re done! We\u0026rsquo;ve built a full CLI tool with usage strings, help commands and two subcommands each taking two arguments.\nThe next step is to go back to Bash and take advantage of its great completion infrastructure to provide a completion script that works on Linux and macOS. No such feature is available in Windows\u0026rsquo;s CMD. Even though there is PSReadline on Windows, I\u0026rsquo;m not going to write about it because I have no experience with it, as is the case woth most of the Windows-specific programming interfaces and tools. As always, remember to check out my Flutter book and follow me on Twitter.\n","permalink":"https://www.carmine.dev/posts/argparse/","tags":null,"title":"Building a Full-Featured Python CLI Tool With argparse"},{"categories":["scripting","python","tutorial"],"contents":"In the previous post we saw how to use Bash to build a simple script that copies some pictures organized into subfolders into a single folder while renaming them and adding some text on them to make it possible for you to know where it was taken based on the folder the pictures were in. I recommend you look at that first because I explain the specific problem being solved, the directory structure and offer a simple solution to the problem. If you can’t be bothered to read that, here’s a summary.\nTL;DR of The Previous Post: The Problem We’re Going to Solve In the previous post I imagined a problem someone could have that could be really easily solved by using computers for what they’re best at: performing repetitive, predictable tasks fast and without requiring the user to do anything while the software does what it’s designed to do.\nThe issue was the organization of pictures from the collection of a tourist who, upon coming back from a trip to Italy, is eager to show to friends and relatives the pictures taken of the many great sights Italy has to offer. To do that, they all need to be in one folder so that they can be shown in sequence easily but they also need to be recognizable both for their filename and for some text shown on them so that the tourist doesn’t necessarily have to remember where each picture was taken.\nWe have a directory tree that looks like this:\nitaly_pics/ ├── Center │ ├── Assisi │ ├── Florence │ ├── Marche │ ├── Pisa │ ├── Rome_Lazio │ └── Siena ├── North │ ├── EmiliaRomagna │ ├── Genoa_CinqueTerre │ ├── Milan_Lombardy │ ├── Trentino │ ├── Turin │ └── Venice └── South ├── Bari_Apulia ├── Basilicata ├── Calabria ├── Campobasso ├── Naples_Campania └── Sicily With each of the subfolders (Rome_Lazio, Florence, Sicily, etc.) containing one or more pictures.\nThe output will be in another directory, called italy_pics_organized, to be created inside italy_pics’s parent directory if it doesn’t exist there already.\nAs I already said, that post outlined the process of writing a solution for this problem using Bash and ImageMagick\u0026rsquo;s convert CLI tool, but this post is here to go beyond that and write something much better with Python.\nWhat the Bash Solution Was Missing: Why Move to Python The Bash solution had multiple issues: it wasn’t portable given that it runs on a specific shell and interpreter that aren’t really great to use if you’re not using an OS that supports it natively (for example, Windows support isn’t great) and that it only works for a very specific directory structure with no files in the directory tree that aren’t images in a subfolder of a subfolder of the current directory.\nSome of you in response to that post mentioned Python as an alternative. As I mentioned in that post, I was already planning to have an article guiding through the creation of a full-blown CLI utility using Python, but we’re probably better off starting with something simpler and more similar to the original script, but that solves some of the issues that are related to the language, such as the ones I described above in addition to being slightly faster and having code that’s a lot easier to read and understand (it’s so nice to use proper programming languages).\nThe main usability improvement will be the ability to specify the input directory and output directory when running the command instead of having them depend on fixed relative paths from the working directory (. and ../italy_pics_organized in our case).\nWhat You Need to Know This post doesn’t suppose you have any experience with Python programming but is not intended to be a comprehensive Python introduction (there is plenty of material on that online, no need to be redundant here). What I will suppose, though, is that you have some basic knowledge of the structure of code written in an object-oriented high-level programming language (selection, iteration, classes, objects, functions, libraries, etc.).\nWhat You Need to Have on Your Computer First of all, let\u0026rsquo;s start by outlining the required tools. The obvious requirement is Python 3 along with the PyPI pip CLI tool installed and accessible from your terminal or command prompt. In addition to that, we\u0026rsquo;re still going to need ImageMagick, but we\u0026rsquo;re not going to use the convert CLI command because we have some nicer interfaces we can work with to build our tool since we\u0026rsquo;re running Python.\nMore specifically, we\u0026rsquo;re going to use the Wand package from PyPI that provides an easy-to-use interface to the ImageMagick libraries.\nRegarding the installation of these tools I recommend you install Python using your distribution\u0026rsquo;s package manager on Linux, using HomeBrew on Mac or by downloading the latest version of Python for Windows and to follow the installation instructions for ImageMagick and Wand on Wand\u0026rsquo;s website.\nAn Introduction to the Wand Python Package After you’ve installed ImageMagick and Wand, we can bypass the usage of the convert which, in a Python script, would require spawning a subprocess and that is something most people don’t really want to do unless strictly necessary: using a library, when it exists, is almost always a better choice.\nWe’re going to use two classes from the wand package: the Image from wand.image and Drawing from wand.drawing, and import them into our code by putting the following at the start of our Python script:\nfrom wand.image import Image from wand.drawing import Drawing If you have written Python packages in the past you’d know the wand.image and wand.drawing names are due to the internal structure of the package, whereas Image and Drawing are the names of the classes we’re importing.\nThe two classes, when used together, allow us to load images, draw on them, and then save them.\nGetting an Image Object The Image class is meant to be used in a with block like this\nwith Image(filename=filename) as image: # do something with the image, which exists here # as long as you keep indenting the code # the image doesn’t exist here # because the indented block is over if the path to the file (either relative or absolute) is saved to the filename variable, this will create a variable called image that only exists within the indented block shown in the example above. You can draw on an Image using the Drawing class.\nWe\u0026rsquo;ll be calling methods directly on our image only later, when we save it using image.save.\nThe Drawing Class Before getting into the details of the Drawing class, let\u0026rsquo;s remind ourselves of how we annotated text over images using the convert command-line tool.\nThe command is used like this:\nconvert input.png -fill \u0026#34;textcolor\u0026#34; -pointsize textsize -gravity WhereTheTextWillBe -annotate +offsetHorizontal+offsetVertical \u0026#34;watermark text\u0026#34; output.png More specifically, we gave the following arguments to that command in the Bash script:\nconvert ./${picture} -fill \u0026#34;white\u0026#34; -pointsize 90 -gravity SouthEast -annotate +30+30 \u0026#34;${watermarktext}\u0026#34; \u0026#34;${saveto}\u0026#34; and ${variable_name} is how a variable’s value is inserted into a string in Bash.\nThe -fill, -pointsize and -gravity arguments tell convert some of the attributes of the thing we want to draw: what color to fill it with, what size font to use and where to put the new object compared to the original image, while -annotate tells convert what to do: annotate some text over the image offset by 30 pixels horizontally and 30 pixels vertically. the first argument and the last argument are simply the picture we’re drawing the text on and the path where to save the edited image.\nThe way we do that in Python using Wand is by initializing a new Drawing object\ndraw = Drawing() setting its fill_color property to a string:\ndraw.fill_color = \u0026#34;white\u0026#34; setting the font_size:\ndraw.font_size = 90 and the annotation’s gravity with a string similar to the one we used for the convert CLI command:\ndraw.gravity = \u0026#34;south_east\u0026#34; At last, draw the annotation on an Image object:\ndraw.draw(image) And save the edited image:\nimage.save(filename=f\u0026#39;{saveto}\u0026#39;) Wrapping up, the equivalent to the command we saw above in Python using Wand is\n with Image(filename=picture) as image: draw = Drawing() draw.fill_color = \u0026#34;white\u0026#34; draw.font_size = 90 draw.gravity = \u0026#34;south_east\u0026#34; draw.text(30, 30, text) draw.draw(image) image.save(filename=f\u0026#39;{saveto}\u0026#39;) We will set the value of picture and saveto later.\nHandling Files and Directories in Python The Python standard library contains a module that can be used, among other things, to browse files and directories and to change the current directory (the paths passed to the Image constructor and to Image.save() can also be relative paths).\nThat module can be imported adding\nimport os below the lines\nfrom wand.image import Image from wand.drawing import Drawing The most important functions we\u0026rsquo;re going to use from the os module are these three:\nos.chdir, which changes the current working directory to the path you pass to it (which can be relative or absolute, just like the cd shell command; os.listdir, which returns a list of the names of the files and directories in the current directory; os.scandir, which returns a list of files and directories, each of which is an os.DirEntry, which is a type of data that stores, along with the file/directory name, other attributes such as the full path or information on whether it’s a directory or a file.\nIf we had stuck with the Bash script\u0026rsquo;s behavior and only had to look for directories in the starting directory, we could have used\nos.scandir(“.”) and then only keep its results in a list if they are directories.\nWe now want the user to be able to specify any directory as an argument and look there for pictures given that we considered only looking in the current working directory a limitation of the Bash script.\nWe\u0026rsquo;re simply going to take arguments from the argv interface you might have used in C (or in Python) and use the first argument as the directory from which to take the unedited, structured, pictures and the second one as the output folder where to store the edited pictures.\nCommand-line Arguments and argv When you run a command like cd on a command-line interface, you need to specify an argument: what directory to change the working directory to.\nAs you know, these arguments are specified after the command name in the following way:\ncommandname argument1 argument2 argument3 ... When writing Python scripts, these arguments are accessible by using the sys.argv list:\nfrom sys import argv # argv[0] = commandname # argv[1] = argument1 # argv[2] = argument2 # argv[3] = argument3 # ... Regardless of whether you run your script as an executable or by using the python command, argv[0] will always be your script\u0026rsquo;s file name.\nThis means that, if we want the first argument to be where to take the images from, we need to write\nos.scandir(argv[1]) You can check if an os.DirEntry object points to a directory by checking the value returned by its is_dir() method. We’re going to use a list comprehension to do that in a very tidy and compact way:\nareas = [file for file in os.scandir(argv[1]) if file.is_dir()] For each area:\nfor area in areas: We’re going to move into the directory corresponding to the area:\nos.chdir(area) and get a list of the city folders in the current directory:\ncities = [file for file in os.scandir(\u0026#34;.\u0026#34;) if file.is_dir()] and look for pictures inside each of those directories\nfor city in cities: os.chdir(city) pics = [file for file in os.scandir(\u0026#34;.\u0026#34;) if file.is_file()] # deal with the pictures os.chdir(“..”) and go back to the parent directory for each area:\nos.chdir(os.pardir) All in all, until now, we have written the following:\nareas = [file for file in os.scandir(argv[1]) if file.is_dir()] for area in areas: os.chdir(area) cities = [file for file in os.scandir(\u0026#34;.\u0026#34;) if file.is_dir()] for city in cities: os.chdir(city) pics = [file for file in os.scandir(\u0026#34;.\u0026#34;) if file.is_file()] for pic in pics: # deal with each picture os.chdir(\u0026#34;..\u0026#34;) os.chdir(\u0026#34;..\u0026#34;) Dealing With Each Picture We are going to process each picture by passing all of the needed information to a separate function that will perform all the needed actions with the needed parameters. Before that, we need to focus on one aspect that requires more attention: we are adding to each picture’s filename a progressive number, which is a value we need to keep track of and must be outside of the function that processes each picture.\nHaving that as a global variable is not what we’re going to do because this is a chance to go over OOP in Python and because implementing everything in a class improves code reusability and will be useful in the next post when we build upon the tool we build in this post.\nCreating an ImageProcessor Class First of all, here\u0026rsquo;s how you define a class and a member variable:\nclass ImageProcessor: i = 0 We are going to call the function we built in the previous chapter, which takes the paths from argv, traverses the directory tree and runs another function on each picture process_argv.\nPython methods (if they\u0026rsquo;re not supposed to be static) take the object they are ran on as an argument called self, which is used a lot like this within classes in JavaScript: self.i is the syntax used to access the i member variable, whereas self.process(args) is the syntax used to call the process() method with the args arguments.\nThe final version of the function we built in the previous paragraph, along with a few try-catch blocks to make sure the user input is something we can work with and a call to the yet-to-be-defined process() function and a few lines that deal with the output directory I\u0026rsquo;ll explain after it, is the following:\nclass ImageProcessor: i = 0 def process_argv(self): if len(argv) \u0026lt; 3: print(\u0026#34;Some arguments are missing.\u0026#34;) print(\u0026#34;Usage: picorganizer.py input_directory output_directory\u0026#34;) return areas = [] try: areas = [file for file in os.scandir(argv[1]) if file.is_dir()] if len(areas) == 0: raise Exception(\u0026#34;No subdiretories in input path\u0026#34;) except: print(\u0026#34;The provided input path is not valid\u0026#34;) save_dir = [] try: save_dir = [dir for dir in os.scandir(f\u0026#34;{argv[2]}/..\u0026#34;) if dir.name == os.path.split(argv[2])[1] and dir.is_dir()][0] except: print(\u0026#34;The provided output path doesn\u0026#39;t exist or is invalid\u0026#34;) for area in areas: os.chdir(area) cities = [file for file in os.scandir(\u0026#34;.\u0026#34;) if file.is_dir()] for city in cities: os.chdir(city) pics = [file for file in os.scandir(\u0026#34;.\u0026#34;) if file.is_file()] for pic in pics: print(\u0026#34; Pic:\u0026#34; + str(pic)) self.process(area, city, pic, os.path.abspath(save_dir)) os.chdir(os.pardir) os.chdir(os.pardir) The line\nsave_dir = [dir for dir in os.scandir(f\u0026#34;{argv[2]}/..\u0026#34;) if dir.name == os.path.split(argv[2])[1] and dir.is_dir()][0]] Scans the second argument (the output directory)s parent directory and, if the entity the user gave us a path to actually exists, we'll assign it to the save_dirvariable. This is inside atry-catch` block that informs the user of the error and terminates execution if the second argument points to a non-existent directory, given that it would trigger an exception.\nos.path.split(argv[2])[1] is used to access the substring of argv[2] after the last / character. In other words, it is used to access the output directory\u0026rsquo;s name, without the path leading to it.\n\u0026lsquo;f\u0026quot;{argv[2]}/..\u0026quot;\u0026rsquo; is called an f-string and is how string interpolation is done from Python 3 6 onwards: it is the string made up of the value of argv[2] followed by the /.. characters. For example, if the value of argv[2] were path/to/dir, the value of that f-string would be path/to/dir/.., which is the same as path/to, which is the path to directory where we should be able to find a directory called dir if we list the contents of that directory.\nos.path.abspath(save_dir)) returns the absolute path to the save_dir.\nWriting the process() Method First of all, let\u0026rsquo;s declare the arguments with type annotations, making sure we establish what is needed to make this functiom work:\ndef process(self, area: os.DirEntry, city: os.DirEntry, pic: os.DirEntry, save_dir: str): We have already seen how to process images, we just need to make it work with these arguments.\nThe first thing to consider is that the process_argv will already change the working directory to the directory in which the image to process is located, so we only need to pass the filename to the Image constructor to get the right image:\nfilename = pic.name To avoid messing up, before we change the working directory, let\u0026rsquo;s save the absolute path to the current directory to a variable so that we can go back to it after we\u0026rsquo;re done with our processing:\nreturn_dir = os.path.abspath(os.curdir) The last piece of data we need to extract from the argument is the image\u0026rsquo;s extension, which we can get with os.path.splitext():\n(name, extension) = os.path.splitext(filename) Here we\u0026rsquo;re unpacking a tuple, which is a pair of values returned by the called function, each of which we can each assign to a variable.\nThe rest of the process function is what we saw at the start of the post when we examined how to use Wand to replace the convert command:\nwith Image(filename=filename) as image: text = f\u0026#39;{city.name}({area.name})\u0026#39; draw = Drawing() draw.fill_color = \u0026#34;white\u0026#34; draw.font_size = 90 draw.gravity = \u0026#34;south_east\u0026#34; draw.text(30, 30, text) draw.draw(image) os.chdir(save_dir) image.save(filename=f\u0026#39;{self.i}-{text}{extension}\u0026#39;) self.i=self.i+1 os.chdir(return_dir) The entire process() function, with a few explanatory comments, ends up being the following:\n def process(self, area: os.DirEntry, city: os.DirEntry, pic: os.DirEntry, save_dir: str): # os.DirEntry.name is the picture\u0026#39;s filename filename = pic.name # Store the absolute path of the current directory # so that we can return to it when we\u0026#39;re done, # so that the calling function doesn\u0026#39;t end up # in a working directory that is not the same # as the one it was in before the call to process() return_dir = os.path.abspath(os.curdir) # os.path.splitext gives us both the file name and # the extension of the picture. We need the extension # because we\u0026#39;re going to use it to tell Wand # (and, in turn, ImageMagick) what extension # to give to the image and we want to retain # the original. (name, extension) = os.path.splitext(filename) with Image(filename=filename) as image: text = f\u0026#39;{city.name}({area.name})\u0026#39; draw = Drawing() draw.fill_color = \u0026#34;white\u0026#34; draw.font_size = 90 draw.gravity = \u0026#34;south_east\u0026#34; draw.text(30, 30, text) draw.draw(image) os.chdir(save_dir) image.save(filename=f\u0026#39;{self.i}-{text}{extension}\u0026#39;) self.i=self.i+1 os.chdir(return_dir) Wrapping Up If you liked this post, follow me on Twitter (handle @carminezacc) and check out my Flutter book or my blog at carmine.dev.\nThe entire Python script, including the call to process_argv(), ends up being the following:\nfrom wand.image import Image from wand.drawing import Drawing import os from sys import argv class ImageProcessor: i = 0 def process(self, area: os.DirEntry, city: os.DirEntry, pic: os.DirEntry, save_dir: str): # os.DirEntry.name is the picture\u0026#39;s filename filename = pic.name # Store the absolute path of the current directory # so that we can return to it when we\u0026#39;re done, # so that the calling function doesn\u0026#39;t end up # in a working directory that is not the same # as the one it was in before the call to process() return_dir = os.path.abspath(os.curdir) # os.path.splitext gives us both the file name and # the extension of the picture. We need the extension # because we\u0026#39;re going to use it to tell Wand # (and, in turn, ImageMagick) what extension # to give to the image and we want to retain # the original one (name, extension) = os.path.splitext(pic) with Image(filename=filename) as image: text = f\u0026#39;{city.name}({area.name})\u0026#39; draw = Drawing() draw.fill_color = \u0026#34;white\u0026#34; draw.font_size = 90 draw.gravity = \u0026#34;south_east\u0026#34; draw.text(30, 30, text) draw.draw(image) os.chdir(save_dir) image.save(filename=f\u0026#39;{self.i}-{text}{extension}\u0026#39;) self.i=self.i+1 os.chdir(return_dir) def process_argv(self): if len(argv) \u0026lt; 3: print(\u0026#34;Some arguments are missing.\u0026#34;) print(\u0026#34;Usage: picorganizer.py input_directory output_directory\u0026#34;) return areas = [] try: areas = [file for file in os.scandir(argv[1]) if file.is_dir()] if len(areas) == 0: raise Exception(\u0026#34;No subdiretories in input path\u0026#34;) except: print(\u0026#34;The provided input path is not valid\u0026#34;) save_dir = [] try: save_dir = [dir for dir in os.scandir(f\u0026#34;{argv[2]}/..\u0026#34;) if dir.name == os.path.split(argv[2])[1] and dir.is_dir()][0] except: print(\u0026#34;The provided output path doesn\u0026#39;t exist or is invalid\u0026#34;) for area in areas: os.chdir(area) cities = [file for file in os.scandir(\u0026#34;.\u0026#34;) if file.is_dir()] for city in cities: os.chdir(city) pics = [file for file in os.scandir(\u0026#34;.\u0026#34;) if file.is_file()] for pic in pics: print(\u0026#34; Pic:\u0026#34; + str(pic)) self.process(area, city, pic, os.path.abspath(save_dir)) os.chdir(os.pardir) os.chdir(os.pardir) ImageProcessor().process_argv() ","permalink":"https://www.carmine.dev/posts/wandpython/","tags":null,"title":"Basic Python Scripting to Automate Everyday Tasks: Add Text to Images Using ImageMagick and Wand"},{"categories":["scripting","bash","linux","tutorial"],"contents":"This article is the first in a series of posts about automating everyday actions. We’ll start with Bash shell scripting, which allows you to write scripts to automate dull, repetitive tasks. You can also find it on my blog.\nThe great advantage of Bash shell scripting compared to writing a full CLI tool to do what we need is that it is very easy to do, especially for those familiar with the Bash shell already, but it is only feasible to build Bash scripts that can be used for a very limited range of applications.\nThe problem to solve Let’s identify a problem anyone can have at some point in life: editing some files according to the folder they’re stored in.\nA relatable, if not too specific, story of someone who needs to learn Bash scripting Let’s say you spend your summer vacation in Italy because you love when the weather is extremely hot, have heard there are beautiful cities, ancient churches, Roman Empire ruins and you want to taste typical Italian food in the place where it all started. However much time you decide to spend, Italy isn’t too big, there are fast trains, and you decide to visit several cities. Just like any tourist, you take pictures everywhere and, by the time you’re back home, you organize your pictures in folders.\nThe current situation At this point you can at least figure out where you were when each picture was taken from the date on which it was taken from the hotel/rail/bus/domestic plane reservations you must have because rental cars with automatic transmissions are very expensive and less than 20% of Americans can drive a manual. You arrange your pictures into subfolders: you have folders for each place you visited and you put those folders in three folders called North, Center and South because it’s nice to be able to know that when you’ll look at the pictures in the future.\nThe problem That in particular is a problem: looking at the pictures will now require you to browse and select pictures in each subfolder manually, and that’s especially painful on some less advanced I/O devices like TV remotes.\nIt would be ideal to be able to take all of those neatly organized pictures you have, put them all in one folder with a watermark telling you where you’ve taken them so it won’t look like you would have been better off just downloading some pictures from the Web when you show them to your friends (or kids) 10 years after you’ve been there.\nDoing that by hand will require another 10 years and your friends or kids will already have visited all of the places you’ve visited fifty times by the time you are done. Fortunately, there is a way to make that quick and easy, and that is by embracing Bash shell scripting.\nSolving the problem Solving this problem requires two different levels of difficulty depending on what operating system you’re running. If you’re running most GNU/Linux distributions or macOS, Bash is your default shell, so it’s already installed and you can go on with the next section without having to install anything else. If you’re running any other Unix or Unix-like operating system that doesn’t install Bash by default, installing Bash is generally very easy and you can find specific instructions online in the very unlikely case you don’t already know how to install a package or port called bash on your OS of choice.\nRunning Bash on Windows If you’re running Windows, you’ll have to install the WSL (Windows Subsystem for Linux) by installing one of the packages available in the Windows Store that include Bash. You just need to open the Windows Store, search for Ubuntu (for example) and install it. When starting for the first time, it will prompt you to enter a username and password you’ll need to remember. The password won’t even be shown to you in the form of asterisks, in case you’re confused by the fact it seems like you’re not actually typing anything in.\nAfter that, you’ll be able to access Bash in any directory on your PC by running the\nbash command. You can exit the Bash shell by running the\nexit command.\nMore details about how to use it will be provided in the rest of the article.\nBash scripting: the basics At its simplest, a Bash script is just a list of shell commands separated by newlines or concatenated together using pipes or some of the many script-oriented constructs Bash includes.\nA quick introduction to Bash and the Unix command line This section will be a very quick introduction to the usage of the Bash shell and the Unix command line in general, given that most shells are very similar when it comes to the most basic tasks. There are plenty of books available online that will teach you how to use it, many of which are aimed directly at Linux users, but they also apply to other Unix-like operating systems and to the Windows Subsystem for Linux.\nThe first thing to understand about any command line interface is that it’s like using a file manager: at any point you’re operating in a specific directory, called the working directory. Running the command (by typing it in and then pressing enter)\npwd will return the current working directory.\nThe directory structure of Unix-like operating systems is a tree that branches out from the single root directory, the path of which is simply the character /. Other directories are chained after that separated by forward slashes. For example, the home directory at the root of the tree is found at path\n/home and a hypothetical user directory inside that would be at path\n/home/user Paths can be also expressed as relative paths, based on the current CLI working directory. The current working directory is expressed as ./ and the parent directory (the directory that contains the working directory) is expressed as ../.\nYou can change the working directory using the cd command followed by the path of the directory, expressed either as a relative path or an absolute path. For example, if you want to change the working directory to the parent directory, you’d write\ncd ../ The trailing slash can be omitted and, if you’re moving into a subdirectory you can omit the ./ at the start, making the commands\ncd ./Pictures/italy_pics/ and\ncd Pictures/italy_pics equivalent.\nFiles can be copied using the cp command, which takes two arguments: the path to the file to be copied and the path where you want the copy to be created, including the file name if you want the copy to have a different name: if you have a file called pic001.png in the italy_pics subdirectory and you want to copy it to the current working directory retaining the original file name, you’d run one of the following three commands (in decreasing order of command length)\ncp italy_pics/pic001.png ./pic001.png cp italy_pics/pic001.png ./ cp italy_pics/pic001.png . The command to move files is mv and you use it just like cp, except for the fact that it can be used to rename files by trying to move a file into the same directory it came from but with a different file name:\nmv italy_pics/pic001.png italy_pics/pic1.png While using the interactive shell, you can use the Tab keyboard button to get automatic completion of commands and arguments when there is only one choice or get a list of possible option. This is not relevant for Bash scripting, but will be more relevant in the coming articles.\nRunning a Bash script Bash is an interpreted language and Bash scripts are ran mostly just like .py files.\nTo run a bash script saved in a file called script.sh, open a terminal window in the same directory as the script and run\nbash script.sh But there is actually a better way: just like with Python scripts, you can add a line at the top of the file, called the shebang line.\nThe shebang line consists of the two characters #! followed by the path to the interpreter to be used to run the script. In the case of bash, it is found at (or symlinked to) /bin/bash in pretty much every environment in which Bash installed, so you can add\n#!/bin/bash at the very top of your script so that the shell knows what interpreter to run.\nThis is useful because you can make the script executable with\nchmod +x script.sh and then run it just like any executable with\n./script.sh ~/bin If it’s a script you think you’ll need to use often, you can either add it to the systemwide binary file paths (where the packages you download are installed) or create a bin folder in your home directory and copy the script there. For example, rename the script file to the command to the name you want to give to the command, for example myfirstscript using mv and then create the ~/bin directory and copy the file there with the following three commands (in an interactive Unix shell or Bash shell on Windows):\nmv script.sh myfirstscript mkdir ~/bin cp myfirstscript ~/bin/ and you can run the script simply by running\nmyfirstscript from any working directory as long as you’re using the same user account you used to copy the file.\nWriting a basic Bash script Let’s start writing a Bash script by making a script that copies all of our organized pictures into a single directory and renameames them according to the place where they were taken. This is not quite as good as the watermark we wanted, but let’s do one thing at a time\nOpen any text editor and create a file called picorganizer in the ~/bin directory. The first thing you’ll need to add is the shebang line\n#!/bin/bash Make it executable right away by opening a terminal and running\nchmod +x ~/bin/picorganizer What our script will actually need to do To solve the problem we have, we need to:\n  List the files in the directories we need to copy the files from\n  For each file we need to take the following three actions\n Copy the files in the target folder rename the file to a progressive number add a watermark of the place where it was taken    Finding the files we need to copy The example directory tree we\u0026rsquo;ll be working with (that you can get by running the tree command) will be the following\nitaly_pics/ ├── Center │ ├── Assisi │ ├── Florence │ ├── Marche │ ├── Pisa │ ├── Rome_Lazio │ └── Siena ├── North │ ├── EmiliaRomagna │ ├── Genoa_CinqueTerre │ ├── Milan_Lombardy │ ├── Trentino │ ├── Turin │ └── Venice └── South ├── Bari_Apulia ├── Basilicata ├── Calabria ├── Campobasso ├── Naples_Campania └── Sicily where each city/region name is a directory containing the pictures taken in that place. These are example places in Italy and do not necessarily represent places I would recommend going to, don\u0026rsquo;t judge me for a semi-pseudo-random selection of places.\nTo make the script aware of what we\u0026rsquo;re working with, we need to get a list of files and directories and store them in a Bash variable. Let\u0026rsquo;s start by learning the command to list files and directories.\nIn the Bash interactive shell, we can use the\nls command to simply list the files and directories contained in the working directory, or you can run it with a path argument, like this:\nls /path/to/dir to list the files and directories contained in /path/to/dir.\nWe can save the output of the ls command to a variable called list by writing, in our Bash script, the following:\nlist=$(ls) where $(command) means whatever command prints to standard output. You can then use that variable just by prefixing the variable name with $ or by prefixing it with $ and enclosing the variable name in square brackets: just\nls is equivalent to\nfiles=$(ls) echo \u0026#34;$files\u0026#34; and to\nfiles=$(ls) echo \u0026#34;${files}\u0026#34; This is not actually what we need right now, though: Bash\u0026rsquo;s for in loop is able to iterate over files in the working directory very easily, and we can just nest them and get to the pictures very quickly:\nfor area in *; do for city in ${area}/*; do for picture in ${area}/${city}/*; do # do something with ${area}/${city}/${picture} done done done We can simply copy them all to another directory renamed to reflect where they were taken by adding the cp command to the innermost for loop:\nmkdir ../italy_pics_organized i=1 for area in *; do for city in ${area}/*; do for picture in ${city}/*; do extension=${picture##*.} cityname=\u0026#34;${city##*/}\u0026#34; cp ${picture} \u0026#34;../italy_pics_organized/${i}-${cityname}(${area}).${extension}\u0026#34; ((i++)) done done done There are a few things I haven\u0026rsquo;t yet explained and used here. Now I\u0026rsquo;ll explain them.\nFirst of all, Bash doesn\u0026rsquo;t have variable types: every variable is a string and it doesn\u0026rsquo;t implement any mathematical operators or commands directly, so we need to use arithmetic expansion, which supports some specific Shell Arithmetic operators.\nThe ${parameter##word} expression used to get the city name and extension in the following way: it looks inside the parameter for the pattern (word in this notation) we specify after ## (in our case it\u0026rsquo;s *. for the extension and */ for the city name) and only returns the rest of the parameter, deleting the pattern (but keeping it in the original variable). You can find more information about this and the rest of what can be done with parameter expansion using the $ sign here.\nUsing ImageMagick to Add a Watermark We are doing something, and the script isn\u0026rsquo;t going to get much more complicated than that, but we aren\u0026rsquo;t adding a watermark yet. That\u0026rsquo;s because there isn\u0026rsquo;t a built-in tool to do that. No worries, though: the shell is expandable in the easiest way possible: by installing some software that provides a CLI interface.\nThe tool for the job when it comes to image manipulation is ImageMagick, which you can install by following the instructions on its own official download page.\nOn Linux, what I actually recommend you to do is to install the ImageMagick package on Fedora/RHEL/CentOS by running\nsudo dnf install ImageMagick on Fedora or RHEL/CentOS 8 or by running\nsudo yum install ImageMagick on RHEL/CentOS 7 or earlier.\nOn Ubuntu, you can install the imagemagick package using APT by running\nsudo apt install imagemagick When using WSL with Ubuntu installed on top of Windows, you need to follow instructions for installation on Ubuntu while inside the Bash shell interface.\nImageMagick provides, among other things, a command called convert, which can be used, in conjunction with the annotate functionality, to add watermarks to images by running a command that looks like the following:\nconvert input.png -fill \u0026#34;textcolor\u0026#34; -pointsize textsize -gravity WhereTheTextWillBe -annotate +offsetHorizontal+offsetVertical \u0026#34;watermark text\u0026#34; output.png where you need to replace textcolor with either a color name or an RGB hexadecimal color code (e.g. green or #76ff03), textsize with a number specifying the size of the font (e.g. 10 for a small font, 100 for a big font), WhereTheText will have to be replaced with something along the lines of NorthEast or SouthWest according to where you want the text to be, and paddingHorizontal and paddingVertical are offsets that can be used to move the text around or, more often, away from the edges. input.png and output.png have to be replaced with paths to the input and output pictures.\nFor our example, the command I chose, with ${picture}, ${watermarktext} and ${saveto} being variables, is:\nconvert ./${picture} -fill \u0026#34;white\u0026#34; -pointsize 90 -gravity SouthEast -annotate +30+30 \u0026#34;${watermarktext}\u0026#34; \u0026#34;${saveto}\u0026#34; So the final script is:\n#!/bin/bash mkdir ../italy_pics_organized i=1 for area in *; do for city in ${area}/*; do for picture in ${city}/*.jpg; do cityname=\u0026#34;${city##*/}\u0026#34; extension=\u0026#34;${picture##*.}\u0026#34; saveto=\u0026#34;../italy_pics_organized/${i}-${cityname}(${area}).${extension}\u0026#34; watermark=\u0026#34;${cityname} (${area})\u0026#34; convert ./${picture} -fill \u0026#34;white\u0026#34; -pointsize 90 -gravity SouthEast -annotate +30+30 \u0026#34;${watermark}\u0026#34; \u0026#34;${saveto}\u0026#34; ((i++)) done done done After Ben Sinclair in the comments to this post on dev.to noticed that this wouldn\u0026rsquo;t handle spaces in the path properly, I need to point out that you need to change the character used by Bash to separate items to loop through in the for loop by adding two lines at the top like the following:\nIFS=\u0026#39; \u0026#39; which sets the separator to the newline character (\\n, aka the LF character in character encoding specifications), so that the script ends up being this:\n#!/bin/bash mkdir ../italy_pics_organized i=1 IFS=\u0026#39; \u0026#39; for area in *; do for city in ${area}/*; do for picture in ${city}/*.jpg; do cityname=\u0026#34;${city##*/}\u0026#34; extension=\u0026#34;${picture##*.}\u0026#34; saveto=\u0026#34;../italy_pics_organized/${i}-${cityname}(${area}).${extension}\u0026#34; watermark=\u0026#34;${cityname} (${area})\u0026#34; convert ./${picture} -fill \u0026#34;white\u0026#34; -pointsize 90 -gravity SouthEast -annotate +30+30 \u0026#34;${watermark}\u0026#34; \u0026#34;${saveto}\u0026#34; ((i++)) done done done Tips For the Future Here are a few things I didn\u0026rsquo;tell you you might need to know in the future when working with Bash or browsing Bash-related documentation.\nThe Difference Between # and $ Usually, when reading documentation about Unix command line usage (including the sections of my book about cross-platform mobile app development that concern Linux installation or CLI usage, for example) you might find that the commands are prefixed with the character $, like in the following example:\n$ ls -alh or are prefixed with #, like in the following example:\n# vim /etc/fstab Those prefixed with $ are meant to be executed as an unprivileged, regular user. Those prefixed with # are meant to be executed by the root account or by using sudo.\nDon\u0026rsquo;t Delete Your Stuff: a (Not So) Funny Anecdote You might want to clean up and use the command\nrm -rf * if you know the working directory is going to be each of the directories in which you have pictures organized the old way, for example. Only use such a destructive command if you’re 100% sure there is no way for it to get executed in the wrong folder. Make sure to at least turn it into something that only deletes files with the extension you want to delete like this\nrm -rf *.jpg rm -rf *.jpeg If you’re thinking nobody would be so dumb not to think of it, there is at least one exception in the world. Some years ago I was a bit too confident and wrote a shell script that did some cleaning up afterwards. At some point during the execution of the script, it executed rm -rf * in my home folder. That’s not great.\nI only figured it out when it was halfway through deleting the Documents folder, and it had already deleted the ~/bin folder containing, ironically, most of my commonly used (and harmless) bash scripts (some of which I already was using on some remote servers and that I was able to recover) and itself in the process. I had recent backups of most of the important stuff, so it wasn’t the end of the world for me, but I can’t say it wasn’t annoying.\nThe Bash if Bash has an if clause, I just didn\u0026rsquo;t feel like adding more complication to the script (even though it would have been better for it) by adding functionality that requires its use, its basic syntax is\nif [[ condition ]]; then # do something fi You can find more information about it online, and online you\u0026rsquo;ll also find a lot more information on Bash than what it\u0026rsquo;s made sense to include in this post.\nStay in touch with me on Twitter @carminezacc or follow my blog to know when the next post (about making a full-featured CLI tool with Python) comes out. Also, if you\u0026rsquo;re interested in mobile development, check out my book on Flutter.\nThanks to Ben Sinclair on dev.to for finding out I had accidentally left spaces around the assignment operator in the two files=$(ls) code snippets, that I should have added ./ before ${picture} so that there\u0026rsquo;s no chance the directory name will be interpreted as an option if it starts with an hyphen and for noticing that you might have spaces in one of the directory names or in the name of one of the picture, which would have broken the script.\n","permalink":"https://www.carmine.dev/posts/bashautomation/","tags":null,"title":"Bash scripting for everyday actions"},{"categories":null,"contents":"\nProgramming Flutter: Native, Cross-Platform Apps the Easy Way is the book I wrote about Flutter with the Pragmatic Bookshelf. You can find it and buy the eBook on the official Pragmatic Bookshelf website. You can buy the paperback version on Amazon here or at your favorite bookstore.\n","permalink":"https://www.carmine.dev/programmingflutter/","tags":null,"title":"Programming Flutter"},{"categories":null,"contents":"My name is Carmine Zaccagnino and I write some code. If you\u0026rsquo;re interested in hiring me as a freelance developer or consultant, email me at carmine@carminezacc.com. In some rare occasions, I also write sentences in natural languages. Even though I am Italian this blog will only contain English when it comes to natural languages. I can make no such guarantees when it comes to programming languages, even though the focus of this blog will certainly be on Flutter. Very similar to this blog, but with some obvious content length differences, is my @carminezacc Twitter account. You can find the articles you can find in this blog and other (older and mostly about Web development) articles on my Medium page, which is all 100% outside the Medium metered paywall. I\u0026rsquo;d really like to know what you have to say about this blog or my work in general, and you can let me know by sending me an email at carmine@carminezacc.com or by just sending me a DM on Twitter.\nFlutter Like many of you, I have learned about many web and mobile frameworks over the years and, when it comes to mobile especially, something was clearly missing: there was no simple way to build fast cross-platform mobile apps that also gave me the low-level access of native apps. Flutter is built by Google with support from Apple themselves, gives a simple way to run native Java/Kotlin and Objective-C/Swift code and it supports all of the latest innovation in Android and iOS and produces apps that perform very well.\nLinux, Open-Source, System Administration and DevOps Linux and open-source are topics that I care about deeply, and will certainly find space in this blog at some point. I really enjoy using and developing system administration tools, and I often roll my own Linux server for personal projects even when it\u0026rsquo;s economically disadvantageous when compared with other solutions just for the fun of it (and the control that comes with it).\nMy Relationship with Linux I have been running Linux on my main PC for several years now.\nThe Beginning The first Linux distribution I ever tried running as my main operating system was Mint. Then for a while I was mostly running Ubuntu and Debian both on servers and PCs (about 5-6 years from first approach to vanilla Debian itself to the end of my exclusive love of Debian-based distributions). I was unwilling to leave the apt package manager, the rock-solid Debian stability and the overall setup of Debian system, including the location of logs and configuration files and its behaviour in general: it was what I was used to and I was afraid to leave it.\nUnlocking the Potential That ended when I felt like I needed more bleeding-edge software and heard about openSUSE, zypper and YaST. I felt like I could keep control with some easy to use tools while I got used to the way openSUSE worked in general. For about a year that was enough to keep me using openSUSE (and I still believe zypper and YaST are awesome), then, like many Linux users, I went into a distro-hopping adventure: that transition to openSUSE had completely removed all of the inertia and insecurity that stopped me from trying new distributions.\nHopping Here, Hopping There During that time I tried Arch, which was a bit too different from anything I\u0026rsquo;d tried before to stick, even though I really liked its wiki, and I might come back to it in the future. I also tried Gentoo, but found the need to do so much of the hard work of optimizing compile option myself too time-consuming and not worth the effort. Even if not on bare metal, I also tried some of the BSDs, finding the ports-pkg system overall acceptable. The old school init system and overall setup intrigued me, but didn\u0026rsquo;t really feel like something I\u0026rsquo;d want to use everyday.\nSettling Down What I ended up settling on for my desktop distribution is Fedora, starting from when version 25 had just come out, mostly because I was intrigued by Wayland\u0026rsquo;s promise of burning down all of the limitations of the anachronism X11 had become and Fedora\u0026rsquo;s very unique hybrid feel between rolling and fixed releases and frequent kernel updates. It was also partially because I had tried CentOS earlier and had started deploying that on my servers instead of Debian. I love Fedora now, and feel like Red Hat is more trustworthy and open than some other companies that are heavily invested into open-source and Linux: they sponsor CentOS, which had been for years pretty much the legal pirate version of RHEL, and aren\u0026rsquo;t doing anything to stop anyone from using, for free, the same operating system they are selling to companies for a significant amount of money. Obviously buying RHEL is mostly about receiving support, but letting anybody run the same software for free is still commendable.\nContributing Everyone says that contributing to open source is a great thing to do for developers of all levels of expertise, and it\u0026rsquo;s really true: if you\u0026rsquo;re a beginner, it\u0026rsquo;s an easy way to get started writing code that does something useful without having to think about what it can be: it already exists, you just need to improve it. For everyone else, it\u0026rsquo;s a nice and relaxing way to code on someone else\u0026rsquo;s terms and to break the boredom that is usually associated with working on the same thing over and over again (for me, at least): don\u0026rsquo;t change jobs, change your hobbies.\nThe first thing to do is to find projects that interest you.\nOne thing peaked my interest from Red Hat lately: their Stratis storage management tool, which promises to give an easy way to manage a machine\u0026rsquo;s storage, without having to worry about RAID levels or scaling issues: you just add or remove disks to be used for data or redundancy in a pool and mount the virtual device you created. The small contributions I made to its CLI tool are among the very few open-source contributions documented on my main GitHub profile, given that I contributed some projects that bypass GitHub and to some with other e-mail addresses.\nThe Web Web development is also something that will be discussed in this blog as there really is a lot to say about it, both on both the front-end and back-end sides of things, with a focus on back-end frameworks.\nI used to write a lot more about Web development, especially back-end frameworks, and you can find some of my (worst) stuff on my Medium. Maybe there will be some Web development stuff over here too. As always, you can send me an e-mail and let me know whether or not you\u0026rsquo;d appreciate that, there\u0026rsquo;s no point in writing what I\u0026rsquo;d want to read if noone else cares about it.\n","permalink":"https://www.carmine.dev/aboutme/","tags":null,"title":"About Me"},{"categories":null,"contents":"My name is Carmine Zaccagnino and I write some code. If you\u0026rsquo;re interested in hiring me as a freelance developer or consultant, email me at carmine@carminezacc.com. In some rare occasions, I also write sentences in natural languages. Even though I am Italian this blog will only contain English when it comes to natural languages. I can make no such guarantees when it comes to programming languages, even though the focus of this blog will certainly be on Flutter. Very similar to this blog, but with some obvious content length differences, is my @carminezacc Twitter account. You can find the articles you can find in this blog and other (older and mostly about Web development) articles on my Medium page, which is all 100% outside the Medium metered paywall. I\u0026rsquo;d really like to know what you have to say about this blog or my work in general, and you can let me know by sending me an email at carmine@carminezacc.com or by just sending me a DM on Twitter.\nFlutter Like many of you, I have learned about many web and mobile frameworks over the years and, when it comes to mobile especially, something was clearly missing: there was no simple way to build fast cross-platform mobile apps that also gave me the low-level access of native apps. Flutter is built by Google with support from Apple themselves, gives a simple way to run native Java/Kotlin and Objective-C/Swift code and it supports all of the latest innovation in Android and iOS and produces apps that perform very well.\nLinux, Open-Source, System Administration and DevOps Linux and open-source are topics that I care about deeply, and will certainly find space in this blog at some point. I really enjoy using and developing system administration tools, and I often roll my own Linux server for personal projects even when it\u0026rsquo;s economically disadvantageous when compared with other solutions just for the fun of it (and the control that comes with it).\nContainers and Kubernetes I\u0026rsquo;ve really been interested in containers for the last few years, and I\u0026rsquo;m looking to have more and more of my work be DevOps and IT work rather than development work.\nMy Relationship with Linux I have been running Linux on my main PC for several years now.\nThe Beginning The first Linux distribution I ever tried running as my main operating system was Mint. Then for a while I was mostly running Ubuntu and Debian both on servers and PCs (about 5-6 years from first approach to vanilla Debian itself to the end of my exclusive love of Debian-based distributions). I was unwilling to leave the apt package manager, the rock-solid Debian stability and the overall setup of Debian system, including the location of logs and configuration files and its behaviour in general: it was what I was used to and I was afraid to leave it.\nUnlocking the Potential That ended when I felt like I needed more bleeding-edge software and heard about openSUSE, zypper and YaST. I felt like I could keep control with some easy to use tools while I got used to the way openSUSE worked in general. For about a year that was enough to keep me using openSUSE (and I still believe zypper and YaST are awesome), then, like many Linux users, I went into a distro-hopping adventure: that transition to openSUSE had completely removed all of the inertia and insecurity that stopped me from trying new distributions.\nHopping Here, Hopping There During that time I tried Arch, which was a bit too different from anything I\u0026rsquo;d tried before to stick, even though I really liked its wiki, and I might come back to it in the future. I also tried Gentoo, but found the need to do so much of the hard work of optimizing compile option myself too time-consuming and not worth the effort. Even if not on bare metal, I also tried some of the BSDs, finding the ports-pkg system overall acceptable. The old school init system and overall setup intrigued me, but didn\u0026rsquo;t really feel like something I\u0026rsquo;d want to use everyday.\nSettling Down What I ended up settling on for my desktop distribution is Fedora, starting from when version 25 had just come out, mostly because I was intrigued by Wayland\u0026rsquo;s promise of burning down all of the limitations of the anachronism X11 had become and Fedora\u0026rsquo;s very unique hybrid feel between rolling and fixed releases and frequent kernel updates. It was also partially because I had tried CentOS earlier and had started deploying that on my servers instead of Debian. I love Fedora now, and feel like Red Hat is more trustworthy and open than some other companies that are heavily invested into open-source and Linux: they sponsor CentOS, which had been for years pretty much the legal pirate version of RHEL, and aren\u0026rsquo;t doing anything to stop anyone from using, for free, the same operating system they are selling to companies for a significant amount of money. Obviously buying RHEL is mostly about receiving support, but letting anybody run the same software for free is still commendable.\nThat last paragraph was written before the whole CentOS 8 débâcle, but after all CentOS Stream is not as unstable as some make it out to be, and projects like RockyLinux and AlmaLinux are just the same as old school pre-acquisition CentOS.\nI have used Ubuntu as my main workstation OS from January to November 2021, but I\u0026rsquo;ve since happily switched back to Fedora 35 (and then 36).\nContributing Everyone says that contributing to open source is a great thing to do for developers of all levels of expertise, and it\u0026rsquo;s really true: if you\u0026rsquo;re a beginner, it\u0026rsquo;s an easy way to get started writing code that does something useful without having to think about what it can be: it already exists, you just need to improve it. For everyone else, it\u0026rsquo;s a nice and relaxing way to code on someone else\u0026rsquo;s terms and to break the boredom that is usually associated with working on the same thing over and over again (for me, at least): don\u0026rsquo;t change jobs, change your hobbies.\nThe first thing to do is to find projects that interest you.\nOne thing peaked my interest from Red Hat lately: their Stratis storage management tool, which promises to give an easy way to manage a machine\u0026rsquo;s storage, without having to worry about RAID levels or scaling issues: you just add or remove disks to be used for data or redundancy in a pool and mount the virtual device you created. The small contributions I made to its CLI tool are among the very few open-source contributions documented on my main GitHub profile, given that I contributed some projects that bypass GitHub and to some with other e-mail addresses.\nThe Web Web development is also something that will be discussed in this blog as there really is a lot to say about it, both on both the front-end and back-end sides of things, with a focus on back-end frameworks.\nI used to write a lot more about Web development, especially back-end frameworks, and you can find some of my (worst) stuff on my Medium. Maybe there will be some Web development stuff over here too. As always, you can send me an e-mail and let me know whether or not you\u0026rsquo;d appreciate that, there\u0026rsquo;s no point in writing what I\u0026rsquo;d want to read if noone else cares about it.\n","permalink":"https://www.carmine.dev/author/carmine-zaccagnino/","tags":null,"title":"Carmine Zaccagnino"},{"categories":null,"contents":"","permalink":"https://www.carmine.dev/categories/networking/","tags":null,"title":"Networking"}]